<?xml version="1.0" encoding="utf-8"?>
<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modulos.sistema.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="800" height="592" creationComplete="init()" title="Cadastro de Roteiro" showCloseButton="true" close="closeWindow()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import bean.Utility.Util;
				import bean.Utility.CastEntities;
				import bean.assignments.Assignment;
				import mx.skins.halo.NumericStepperUpSkin;
				import mx.collections.ArrayCollection;
				import eventos.UserEvent;
				import eventos.EventLogResponse;
				import eventos.ClosePopupEvent;
				import mx.utils.Base64Decoder;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ModulesController;
				import mx.binding.utils.BindingUtils;
				//import eventos.RespostaLoginEvent;
				//import eventos.FechaPopupEvent;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
				
				private static const millisecondsPerDay : int = 1000 * 60 * 60 * 24;
				
				private var fileRefTests:FileReference;
				private var requestTests: URLRequest;
				private var fileRefInterface:FileReference;
				private var requestInterface: URLRequest;
				private const FILE_UPLOAD_URL:String = Constantes.urlUploadDonwload;
				
				public static var edited: Boolean = false;
				public static var save: Boolean = false; 
				
				private var stage:Stage = new Stage();
				private var assignment:Assignment = new Assignment();
				private var status:*;
				private var doUpload: Boolean = false;
				private var isCreate: Boolean = false;
				private var urlTests: String = "";
				private var urlInterface: String = "";
				private var paramMessage:Array;
	            
	            private function failure(event:FaultEvent):void {
					var message:String;
					try{
						if (event.fault.rootCause.message == null) {
							message = event.fault.faultString;
						} else {
							message = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						message = "Serviço indisponível, reinicie a operação.";
					}
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
				}
				
				private function closeWindow():void {
					dispatchEvent(new ObjectEvent(""));
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				/*
				 *	Caso aconteça algum erro no acesso ao controlador, através do HttpService
				 *	então devemos mostra uma mensagem de erro
				 */
				private function launchEvent(event:FaultEvent):void {
					var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
						event.fault, event.token, event.message);
					dispatchEvent(e);
				}
				
				private function init():void {
					
					facade.channelSet = ModulesController.createChannel("easyCorrection", ExternalInterface.call('getCanalSeguro'));
					status = ModulesController.getParam();
					dfMaximumDate.selectedDate = new Date(new Date().getTime()+(7*millisecondsPerDay));
					dfDiscussionDate.selectedDate = new Date(new Date().getTime()+(21*millisecondsPerDay));
					getCurrentStage();
					if(status != null){
						getAssignment();
						updateAssignmentButton.visible = true;
						createAssignmentButton.visible = false;
					}else{
						updateAssignmentButton.visible = false;
						createAssignmentButton.visible = true;
					}
				}
				
				private function getAssignment():void{
					assignment = new Assignment();
					assignment = CastEntities.castAssignment(status);
					inputDescription.text = assignment.description;

					var discussionDate: Date = assignment.discussionDate as Date;
					inputDiscussionHour.text = Util.unitOrganizesTime(String(discussionDate.getHours()));
					inputDiscussionMinute.text = Util.unitOrganizesTime(String(discussionDate.getMinutes()));
					dfDiscussionDate.selectedDate = discussionDate;
					dfDiscussionDate.text = Util.formatsDate(assignment.discussionDate);
					
					var horarioLimite: Date = assignment.dataFinalEntrega as Date;
					inputHora.text = Util.organizaUnidadeTempo(String(horarioLimite.getHours()));
					inputMinuto.text = Util.organizaUnidadeTempo(String(horarioLimite.getMinutes()));
					dfMaximumDate.selectedDate = horarioLimite;
					dfMaximumDate.text = Util.formataData(assignment.dataFinalEntrega);
					
					var horarioLiberacao: Date = assignment.dataLiberacao as Date;
					inputHoraLiberacao.text = Util.organizaUnidadeTempo(String(horarioLiberacao.getHours()));
					inputMinutoLiberacao.text = Util.organizaUnidadeTempo(String(horarioLiberacao.getMinutes()));
					dfDataLiberacao.selectedDate = horarioLiberacao;
					dfDataLiberacao.text = Util.formataData(assignment.dataLiberacao);
					
					inputDescription.text = assignment.descricao;
					caminhoInterface.text = assignment.diretorioInterface;
					caminhoTestes.text = assignment.diretorioTestes;
					inputTitulo.text = assignment.nome;
					inputNumeroMaxEnvios.text = String(assignment.numeroMaximoEnvios);
					inputMaximoEquipe.text = String(assignment.numeroMaximoParticipantes);
					inputPenalidade.text = String(assignment.penalidadeDiasAtraso);
					inputPorcentagem.text = String(assignment.porcentagemTestesAutomaticos);
					inputTempoLimite.text = String(assignment.tempoLimiteTestes);
				}
				
				private function escolheArquivoTestes(): void{
					fileRefTests = new FileReference();
			   	 	fileRefTests.addEventListener(Event.SELECT, arquivoSelecionadoTestes);
			   	 	fileRefTests.addEventListener(Event.COMPLETE, envioCompletoTestes);
			   	 	fileRefTests.addEventListener(IOErrorEvent.IO_ERROR, erroEnvioTestes);
			    	fileRefTests.browse(new Array(new FileFilter("Testes (*.zip)","*.zip")));
				}
				
				public function erroEnvioTestes(evt:Event):void {
			       	var param:Array = new Array(true, "Ocorreu um erro de transmissão. O arquivo(s) de teste não foi(foram) enviado(s)." +
														"\n\nTente novamente! Caso este erro persista..." + 
														"\n\nVerifique se sua conexão com a internet está ativada.");
					ModulesController.createModule("modulos/sistema/MensagemStatus.swf", this, param);
				}
				
				public function arquivoSelecionadoTestes(evt:Event):void {
			       	requestTests = new URLRequest(FILE_UPLOAD_URL);
			       	caminhoTestes.text = fileRefTests.name;
				}
				
				public function envioCompletoTestes(evt:Event):void {
					requestTests = new URLRequest(FILE_UPLOAD_URL);
					var variables:URLVariables = new URLVariables();
					variables.url = urlInterface;
					variables.nomeArquivo = caminhoInterface.text;
					requestInterface.data = variables;
					fileRefInterface.upload(requestInterface);
				}
				
				public function cadastraRoteiro(): void{
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				private function escolheArquivoInterface(): void{
					fileRefInterface = new FileReference();
			   	 	fileRefInterface.addEventListener(Event.SELECT, arquivoSelecionadoInterface);
			   	 	fileRefInterface.addEventListener(Event.COMPLETE, envioCompletoInterface);
			   	 	fileRefInterface.addEventListener(IOErrorEvent.IO_ERROR, erroEnvioInterface);
			    	fileRefInterface.browse(new Array(new FileFilter("Interface (*.java)","*.java")));
				}
				
				public function erroEnvioInterface(evt:Event):void {
			       	var param:Array = new Array(true, "Ocorreu um erro de transmissão. O arquivo de Interface não foi enviado." +
														"\n\nTente novamente! Caso este erro persista..." + 
														"\n\nVerifique se sua conexão com a internet está ativada.");
					ModulesController.createModule("modulos/sistema/MensagemStatus.swf", this, param);
				}
				
				public function arquivoSelecionadoInterface(evt:Event):void {
			       	requestInterface = new URLRequest(FILE_UPLOAD_URL);
			       	caminhoInterface.text = fileRefInterface.name;
				}
				
				public function envioCompletoInterface(evt:Event):void {
				}
				
				private function getCurrentStage():void{
					facade.getOperation("getPeriodoAtual").send();
				}
				
				private function getPeriodoAtual_result(event:ResultEvent):void{
					stage = new Stage();
					stage = CastDeEntidades.castPeriodo(ArrayCollection(event.result).getItemAt(0));
				}
				
				private function preencheRoteiro():void{
					var dataLimiteDiscussao: Date = Util.formataDataStringEmDate(dfDiscussionDate.text);
					dataLimiteDiscussao.setHours(Number(inputDiscussionHour.text), Number(inputDiscussionMinute.text),0,0);
					assignment.dataFinalDiscussao= dataLimiteDiscussao;
					
					var dataLimiteEntrega: Date = Util.formataDataStringEmDate(dfMaximumDate.text);
					dataLimiteEntrega.setHours(Number(inputHora.text), Number(inputMinuto.text),0,0);						
					assignment.dataFinalEntrega = dataLimiteEntrega;
					 
					var dataLiberacao: Date = Util.formataDataStringEmDate(dfDataLiberacao.text);
					dataLiberacao.setHours(Number(inputHoraLiberacao.text), Number(inputMinutoLiberacao.text),0,0);
					assignment.dataLiberacao = dataLiberacao;
					
					assignment.descricao = inputDescription.text;
					assignment.nome = inputTitulo.text;
					assignment.diretorioInterface = "/periodo" + stage.semestre + "/interface/" + assignment.id + "/";
					assignment.diretorioTestes = "/periodo" + stage.semestre + "/testes/" + assignment.id + "/";
					assignment.numeroMaximoEnvios = int(inputNumeroMaxEnvios.text);
					assignment.numeroMaximoParticipantes = int(inputMaximoEquipe.text);
					assignment.penalidadeDiasAtraso = Util.formataTextValorToNumber(inputPenalidade.text);
					assignment.periodo = stage;
					assignment.porcentagemTestesAutomaticos = Util.formataTextValorToNumber(inputPorcentagem.text);
					assignment.tempoLimiteTestes = int(inputTempoLimite.text);
					
				}
				
				private function checaHora(): Boolean{
					try{
						if( Number(inputHora.text) > 23 ||
							Number(inputMinuto.text) > 59){
							return false;
						}
					}catch(e: Error){
						return false;
					}
					return true;
				}
				
				private function editarRoteiro():void{
					if(assignment.id != 0){
						if (checaHora()){
							preencheRoteiro();
							isCreate = false;
							facade.getOperation("editarRoteiro").send(CastDeEntidades.castRoteiro(assignment));
						}
						else{
							var param:Array = new Array(true, "Horário limite para entrega inválido. (Intervalo: 00:00 ~ 23:59)");
							ModulesController.createModule("modulos/sistema/MensagemStatus.swf", this, param);
						}	
					}					
				}
				
				private function cadastrarRoteiro():void{
					var horaValida: Boolean = checaHora();
					if (checaHora()){
						assignment = new Roteiro();
						preencheRoteiro();
						isCreate = true;
						facade.getOperation("cadastrarRoteiro").send(CastDeEntidades.castRoteiro(assignment));
					}
					else{
						var param:Array = new Array(true, "Horário limite para entrega inválido. (Intervalo: 00:00 ~ 23:59)");
						ModulesController.createModule("modulos/sistema/MensagemStatus.swf", this, param);
					}
				}
				
				private function cadastrarRoteiro_result(event:ResultEvent):void{
					assignment = new Roteiro();
					assignment = CastDeEntidades.castRoteiro(event.result);
					urlTests = "/periodo" + stage.semestre + "/testes/" + assignment.id + "/";
					urlInterface = "/periodo" + stage.semestre + "/interface/" + assignment.id + "/";
					if (!isCreate){
						try{
							var variables:URLVariables = new URLVariables();
							variables.url = urlTests;
							variables.nomeArquivo = "testes.zip";
							requestTests.data = variables;
							fileRefTests.upload(requestTests);
						}catch(e: Error){}
						if(!doUpload){
							edited = true;
							closeWindow();
						} 
					}
					else{
						doUpload = true;
						editarRoteiro();
						save = true;
						closeWindow();
					}
				}
				
				private function atualizaDatasDefaut():void{
					var dataAux: String = dfDataLiberacao.text;
					dfMaximumDate.selectedDate = new Date(dfDataLiberacao.selectedDate.getTime()+(7*millisecondsPerDay));
					dfDiscussionDate.selectedDate = new Date(dfDataLiberacao.selectedDate.getTime()+(21*millisecondsPerDay));
				}
				
			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="getPeriodoAtual" result="getPeriodoAtual_result(event)" fault="failure(event)"/>
			<mx:method name="cadastrarRoteiro" result="cadastrarRoteiro_result(event)" fault="failure(event)"/>
			<mx:method name="editarRoteiro" result="cadastrarRoteiro_result(event)" fault="failure(event)"/>
		</mx:RemoteObject>
		
		<mx:Label text="Título:" fontWeight="bold"
			textAlign="left" width="54" x="10" y="10" id="labelTitulo"/>
		<mx:Label text="Porcentagem Automática da Avaliação:" fontWeight="bold"
			textAlign="left" width="270" x="10" y="330"/>
		<mx:Label text="%" fontWeight="bold"
			textAlign="left" width="20" x="384" y="330"/>
		<mx:Label text="Descrição:" fontWeight="bold"
			textAlign="left" width="79" x="10" y="50" id="labelDescricao"/>
		<mx:TextInput x="62" y="8" id="inputTitulo" width="329" maxChars="250"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"		
		toolTip="" x="538" y="8" width="129" id="dfDataLiberacao" text="{df.format(new Date())}" change="atualizaDatasDefaut()"/>
		<mx:TextInput x="675" y="8" id="inputHoraLiberacao" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="724" y="8" id="inputMinutoLiberacao" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:DateFormatter id="df" formatString="DD/MM/YYYY"/>
		<mx:TextArea x="10" y="78" width="760" height="122" id="inputDescription" maxChars="30000"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"
		toolTip="" x="219" y="223" width="129" id="dfMaximumDate"/>
		<mx:TextInput x="356" y="223" id="inputHora" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="405" y="223" id="inputMinuto" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"
		toolTip="" x="219" y="253" width="129" id="dfDiscussionDate"/>
		<mx:TextInput x="356" y="253" id="inputDiscussionHour" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="405" y="253" id="inputDiscussionMinute" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="723" y="251" id="inputMaximoEquipe" width="47" restrict="[0-9]" maxChars="2" text="1"/>
		<mx:TextInput x="723" y="221" id="inputNumeroMaxEnvios" width="47" restrict="[0-9]" maxChars="2" text="3"/>
		<extra:DecimalInput x="219" y="285"  precision="2" restrict="'0-9'" useThousandsSeparator="true" currencyFormat="br" enabled="true" id="inputPenalidade" width="113" text="0.5"/>
		<extra:DecimalInput x="285" y="328"   precision="2" restrict="'0-9'" useThousandsSeparator="true" currencyFormat="br" enabled="true" id="inputPorcentagem" width="91" text="100"/>
		<mx:TextInput x="641" y="330" id="inputTempoLimite" width="95" restrict="[0-9]" maxChars="2" text="10"/>
		<mx:Label text="Máximo de integrantes por equipe:" fontWeight="bold"
			textAlign="left" width="239" x="476" y="255" id="labelAutomatica0"/>
		<mx:Label text="Penalidade por dia de atraso:" fontWeight="bold"
			textAlign="left" width="201" x="10" y="287"/>
		<mx:Label text="Número máximo de envios:" fontWeight="bold"
			textAlign="left" width="191" x="476" y="225" id="labelAutomatica3"/>
		<mx:Label text="Time-limit dos teste por método:" fontWeight="bold"
			textAlign="left" width="224" x="415" y="332" id="labelAutomatica5"/>
		<mx:Label text="ms" fontWeight="bold"
			textAlign="left" width="27" x="744" y="332" id="labelAutomatica6"/>
		<mx:Label text="H" fontWeight="bold"
			textAlign="left" width="17" x="387" y="225" id="labelAutomatica8"/>
		<mx:Label text="M" fontWeight="bold"
			textAlign="left" width="17" x="434" y="225" id="labelAutomatica7"/>
		<mx:Label text="H" fontWeight="bold"
			textAlign="left" width="17" x="387" y="255" id="labelAutomatica11"/>
		<mx:Label text="M" fontWeight="bold"
			textAlign="left" width="17" x="434" y="255" id="labelAutomatica12"/>
		<mx:Label text="Data Máxima para entrega:" fontWeight="bold"
			textAlign="left" width="201" x="10" y="225" id="labelAutomatica1"/>
		<mx:Label text="Data Máxima para discussão:" fontWeight="bold"
			textAlign="left" width="201" x="10" y="255" id="labelAutomatica2"/>
		<mx:Label text="Data da liberação:" fontWeight="bold"
			textAlign="left" width="131" x="399" y="10" id="labelAutomatica4"/>
		<mx:HRule x="10" y="364" width="760"/>
		<mx:HRule x="10" y="208" width="760"/>
		<mx:HRule x="10" y="317" width="760"/>
		<mx:HRule x="10" y="40" width="760"/>
		<mx:LinkButton x="263.55" y="374" label="   Anexar Testes Automáticos" icon="@Embed(source='../../image/estonar.png')" width="252.9" height="28" id="anexarTestes" click="escolheArquivoTestes()"/>
		<mx:Label x="10" y="406" width="760" id="caminhoTestes" textAlign="center"/>
		<mx:LinkButton x="273.05" y="438" label="   Anexar Interface" width="233.9" icon="@Embed(source='../../image/estonar.png')" height="28" id="anexarInterface" click="escolheArquivoInterface()"/>
		<mx:Label x="10" y="470" width="760" id="caminhoInterface" textAlign="center"/>
		<mx:Button x="298.05" y="510" label="Atualizar Roteiro" width="183.9" icon="@Embed(source='../../image/atualiza.png')" height="28" id="updateAssignmentButton" click="editarRoteiro()"/>
		<mx:Button x="298.05" y="510" label="   Cadastrar Roteiro" width="183.9" icon="@Embed(source='../../image/disquete.png')" height="28" id="createAssignmentButton" click="cadastrarRoteiro()"/>
		<mx:Label text="H" fontWeight="bold"
			textAlign="left" width="17" x="706" y="10" id="labelAutomatica20"/>
		<mx:Label text="M" fontWeight="bold"
			textAlign="left" width="17" x="753" y="10" id="labelAutomatica10"/>
		
		
		
</les:ModuleTitleWindow>

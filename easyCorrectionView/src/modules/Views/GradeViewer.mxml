<?xml version="1.0" encoding="utf-8"?>
<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modules.System.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="800" height="538" creationComplete="init()" title="Grade Table" showCloseButton="true" close="closeWindow()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import flash.sampler.NewObjectSample;
				import com.adobe.utils.NumberFormatter;
				import bean.Utility.Util;
				import mx.utils.ObjectUtil;
				import bean.assessments.Assessment;
				import bean.Utility.CastEntities;
				import bean.assignments.Assignment;
				import mx.collections.ArrayCollection;
				import events.UserEvent;
				import bean.permission.*;
				import bean.user.*;
				import events.EventLogResponse;
				import events.ClosePopupEvent;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ModulesController;
				import mx.binding.utils.BindingUtils;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
				
				private static const millisecondsPerDay : int = 1000 * 60 * 60 * 24;
				
				private function init():void {
					facade.channelSet = ModulesController.createChannel("easyCorrection", ExternalInterface.call('getCanalSeguro'));
					var states: String = String(ModulesController.getParam());
					listAssignments();
				}
				
				private function listAssignments():void{
					facade.getOperation("listAssignments").send();
				}
				
				private function listAssignments_result(event:ResultEvent):void{
					comboAssignment.dataProvider = new ArrayCollection();
					comboAssignment.selectedIndex = -1;
					comboAssignment.dataProvider = event.result;
				}
				
				private function getAssessmentsByAssignment():void{
					var rot: Assignment = CastEntities.castAssignment(comboAssignment.selectedItem);
					facade.getOperation("getAssessmentsByAssignment").send(rot);
				}
				
				private function getAssessmentsByAssignment_result(event:ResultEvent):void{
					dgNotes.dataProvider = new ArrayCollection();
					dgNotes.dataProvider = event.result as ArrayCollection;
				}
	            
	            private function failure(event:FaultEvent):void {
					var message:String;
					try{
						if (event.fault.rootCause.message == null) {
							message = event.fault.faultString;
						} else {
							message = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						message = "Service Unavailable, please restart the operation.";
					}
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
				}
				
				private function closeWindow():void {
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				private function labelGrid(item:*, column:DataGridColumn):String {
					var sLabel:String = "";
					var sHeaderText:String = column.headerText;
					switch (sHeaderText)  {
						case "Login":
							sLabel = item.submission.teamHasUserHasAssignment.user.login;
							break;
						case "Student Name":
							sLabel = item.submission.teamHasUserHasAssignment.user.name;
							break;
						case "Automatic Execution Percentage":
							sLabel = item.submission.teamHasUserHasAssignment.assignment.automaticTestsPercentage;
							break;
						case "Grade 1 (Automatic Assessment)":
							sLabel = item.automaticGrade;
							break;
						case "Grade 2 (Manual Assessment)":
							sLabel = item.correctionGrade;
							break;
						case "Final Grade":
							var submissionDate: Number = (item as Assessment).submission.submissionDate.getTime() / millisecondsPerDay;
							var deliveryDate: Number = (item as Assessment).submission.
								teamHasUserHasAssignment.assignment.deliveryDate.getTime() / millisecondsPerDay;
							var penaltyValue: Number = (item as Assessment).submission.
								teamHasUserHasAssignment.assignment.penaltyPerDaysLate;
							var days: int = (submissionDate - deliveryDate);
							if(days > 0){
								sLabel = ((item.automaticGrade + item.correctionGrade) - (days * (penaltyValue/10))) + "";
							}else{
								sLabel = (item.automaticGrade + item.correctionGrade);
							} 
							break;
					}
					return sLabel;
				}
				
				private function compareName(itemA:Object, itemB:Object):int {  
					return ObjectUtil.stringCompare(
						itemA.submission.teamHasUserHasAssignment.user.name,  
						itemB.submission.teamHasUserHasAssignment.user.name,   
						true
					);
				}
				
				private function compareLogin(itemA:Object, itemB:Object):int {  
					return ObjectUtil.stringCompare(
						itemA.submission.teamHasUserHasAssignment.user.login,  
						itemB.submission.teamHasUserHasAssignment.user.login,   
						true
					);
				}
				
			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="listAssignments" result="listAssignments_result(event)" fault="failure(event)"/>
			<mx:method name="getAssessmentsByAssignment" result="getAssessmentsByAssignment_result(event)" fault="failure(event)"/>
		</mx:RemoteObject>
		
		<mx:ComboBox x="111" y="10" width="659" id="comboAssignment" change="getAssessmentsByAssignment()" enter="getAssessmentsByAssignment()" labelField="name"></mx:ComboBox>
		<mx:HRule x="10" y="40" width="760" height="10"/>
		<mx:DataGrid x="10" y="58" width="760" height="426" wordWrap="true" id="dgNotes" labelFunction="labelGrid">
			<mx:columns>
				<mx:DataGridColumn headerText="Login" width="50" sortCompareFunction="compareLogin"/>
				<mx:DataGridColumn headerText="Student Name"  width="150" sortable="true" sortCompareFunction="compareName"/>
				<mx:DataGridColumn headerText="Automatic Execution Percentage" width="50"/>
				<mx:DataGridColumn headerText="Grade 1 (Automatic Assessment)"  width="50"/>
				<mx:DataGridColumn headerText="Grade 2 (Manual Assessment)" width="50"/>
				<mx:DataGridColumn headerText="Final Grade" width="50"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:Label x="10" y="11.5" width="93" textAlign="left" text="Assignment:" fontWeight="bold"/>
					
</les:ModuleTitleWindow>

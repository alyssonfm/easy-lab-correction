<?xml version="1.0" encoding="utf-8"?>
<!--

-->
<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modules.System.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="718" height="476" creationComplete="init()" title="Assignment Submission" showCloseButton="true" close="closeWindow()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import bean.Utility.Constant;
				import bean.assignments.Assignment;
				import net.digitalprimates.fluint.utils.ResultDisplayUtils;
				import bean.team.TeamHasUserHasAssignment;
				import bean.team.Team;
				import bean.Utility.CastEntities;
				import bean.assignments.Submission;
				import events.UserEvent;
				import bean.permission.*;
				import events.EventLogResponse;
				import events.ClosePopupEvent;
				import mx.utils.Base64Decoder;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ModulesController;
				import mx.binding.utils.BindingUtils;
				//import eventos.RespostaLoginEvent;
				//import eventos.FechaPopupEvent;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
				
				private var fileRef:FileReference;
				private var request: URLRequest;
				private const FILE_UPLOAD_URL:String = Constant.urlUploadDonwload;
	            private var submission:Submission = new Submission();
	            private var tua:TeamHasUserHasAssignment = new TeamHasUserHasAssignment();
	            
	            private function failure(event:FaultEvent):void {
					var message:String;
					try{
						if (event.fault.rootCause.message == null) {
							message = event.fault.faultString;
						} else {
							message = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						message = "Service Unavailable, please restart the operation.";
					}
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
				}
				
				private function closeWindow():void {
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				/*
				 *	Caso aconteça algum erro no acesso ao controlador, através do HttpService
				 *	então devemos mostra uma mensagem de erro
				 */
				private function eventLaunches(event:FaultEvent):void {
					var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
						event.fault, event.token, event.message);
					dispatchEvent(e);
				}
				
				private function init():void {
					facade.channelSet = ModulesController.createChannel("easyCorrection", ExternalInterface.call('getCanalSeguro'));
					var status: String = String(ModulesController.getParam());
					getReleasedAssignments();
				}
				
				private function fileSelect(): void{
					fileRef = new FileReference();
			   	 	fileRef.addEventListener(Event.SELECT, selectFile);
			   	 	fileRef.addEventListener(Event.COMPLETE, completeSend);
			   	 	fileRef.addEventListener(IOErrorEvent.IO_ERROR, errorSending);
			    	fileRef.browse(new Array(new FileFilter("Assignment (*.zip)","*.zip;")));
				}
				
				public function errorSending(evt:Event):void {
					if(submission != null){
						facade.getOperation("deleteSubmission").send(submission);
					}
				}
				
				public function deleteSubmission_result(event:ResultEvent):void{
					var param:Array = new Array(true, "Submission Error! The .zip package should contain only .java files.");
					ModulesController.createModule("modules/System/MessageStatus.swf", this, param);	
				}
				
				public function selectFile(evt:Event):void {
			       	request = new URLRequest(FILE_UPLOAD_URL);
			       	path.text = fileRef.name;
				}
				
				public function completeSend(evt:Event):void {
					request = new URLRequest(FILE_UPLOAD_URL);
					var sub: Submission = CastEntities.castSubmission(submission);
					facade.getOperation("processSubmission").send(sub);
				}
				
				public function processSubmission_result(event:ResultEvent):void{
					var result: String = event.result as String;
					inputDescription.text = result;
					inputDescription.editable = false;
					var param:Array = new Array(false, "Successful assignment submission.\n" + 
														"Waiting the answer...");
					ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
					facade.getOperation("submissionNumber").send(CastEntities.castSubmission(submission));
				}
				
				public function submissionNumber_result(event:ResultEvent): void{
					try{
						if(comboAssignment.enabled){
							numberSubmissions.text = String(event.result);
							maxNumberSubmission.text = comboAssignment.selectedItem.sendMaxNumber;
						}else{
							numberSubmissions.text = String(event.result);
							maxNumberSubmission.text = comboLateAssignment.selectedItem.sendMaxNumber;
						}
					}catch(e: Error){} 
				}
				
				public function getTeamHasUserHasAssignmentByUserAndAssignment():void{
					var param:Array;
					try{
						var id:int = int(SharedObject.getLocal("sistema", "/").data.idUsuario);
						if(comboAssignment.enabled){
							if(comboAssignment.selectedItem != null){
								facade.getOperation("getTeamHasUserHasAssignmentByUserAndAssignment").send(id, CastEntities.castAssignment(comboAssignment.selectedItem).id);
							}
						}else{
							if(comboLateAssignment.selectedItem != null){
								facade.getOperation("getTeamHasUserHasAssignmentByUserAndAssignment").send(id, CastEntities.castAssignment(comboLateAssignment.selectedItem).id);
							}
						}
					}
					catch(e: Error){
						param = new Array(true, "Before submit an assignment solution you should be registered in a team.");
						ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
					}
				}
				
				public function getTeamHasUserHasAssignmentByUserAndAssignment_result(event:ResultEvent):void{
					var param:Array;
					try{
						var result: String = event.result as String;
						tua = new TeamHasUserHasAssignment();
						tua = CastEntities.castTeamHasUserHasAssignment(event.result);
						nameTeam.text = tua.team.name;
						facade.getOperation("getSubmissionNumberByTua").send(tua);
					}
					catch(e: Error){
						param = new Array(true, "Before submit a solution you should be registered in a team.");
						ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
					
					}
				}
				
				public function submitAssignment(): void{
					try{
						var param:Array;
						if (comboAssignment.enabled && comboAssignment.selectedItem == null){
							param = new Array(true, "Before submit a solution you should choose the assignment.");
							ModulesController.createModule("modules/System/MessageStatus.swf", this, param);						
						}else if (comboLateAssignment.enabled && comboLateAssignment.selectedItem == null){
								param = new Array(true, "Before submit a solution you should choose the assignment.");
								ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
						}
						else if (fileRef == null){
							param = new Array(true, "Before submit the solution you should attach the .zip file with it.");
							ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
						}
						else if(fileRef != null && tua.id != 0){
							submission = new Submission();
							submission.teamHasUserHasAssignment = new TeamHasUserHasAssignment();
							submission.teamHasUserHasAssignment = tua; 
							submission.url = "/periodo" + tua.assignment.stage.semester + "/submissoes/roteiro_" + tua.assignment.id + "/" + tua.team.name + "/";
							facade.getOperation("submitAssignment").send(CastEntities.castSubmission(submission));
						}else{
							param = new Array(true, "Before submit an solution you should be registered in a team.");
							ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
						}
					}catch(e: Error){	
						var param2: Array = new Array(true, "Technical failures. Try later...");					
						ModulesController.createModule("modules/System/MessageStatus.swf", this, param2);
					}
				}
				
				public function submitAssignment_result(event:ResultEvent):void{
					submission = new Submission();
					if(event.result != null){
						submission = CastEntities.castSubmission(event.result);
						if(fileRef != null || request != null){
							var variables:URLVariables = new URLVariables();
							variables.url = submission.url;
							variables.fileName = "codigo.zip";
							request.data = variables;
							fileRef.upload(request);
						}
					}
				}
				
				
				public function getReleasedAssignments():void{
					facade.getOperation("getReleasedAssignments").send();
				}
				
				public function getReleasedAssignments_result(event:ResultEvent):void{
					comboAssignment.dataProvider = event.result;
					comboAssignment.selectedIndex = -1;
					facade.getOperation("getLateAssignments").send();
				}
				
				public function getLateAssignments_result(event:ResultEvent):void{
					comboLateAssignment.dataProvider = event.result;
					comboLateAssignment.selectedIndex = -1;
				}
				
				public function clearinfo():void{
					nameTeam.text = "...";
					maxNumberSubmission.text = "0";
					numberSubmissions.text = "0";
					path.text = "";
					inputDescription.text = "";
				}
				
				public function openLateAssignments():void{
					comboAssignment.selectedIndex = -1;
					clearinfo();
					comboAssignment.enabled = false;
					comboLateAssignment.enabled = true;
					
				}
				
				public function openWithinAssignments():void{
					comboLateAssignment.selectedIndex = -1;
					clearinfo();
					comboLateAssignment.enabled = false;
					comboAssignment.enabled = true;
				}				
				
			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="getReleasedAssignments" result="getReleasedAssignments_result(event)" fault="failure(event)"/>
			<mx:method name="getLateAssignments" result="getLateAssignments_result(event)" fault="failure(event)"/>
			<mx:method name="getTeamHasUserHasAssignmentByUserAndAssignment" result="getTeamHasUserHasAssignmentByUserAndAssignment_result(event)" fault="failure(event)"/>
			<mx:method name="submitAssignment" result="submitAssignment_result(event)" fault="failure(event)"/>
			<mx:method name="deleteSubmission" result="deleteSubmission_result(event)" fault="failure(event)"/>
			<mx:method name="processSubmission" result="processSubmission_result(event)" fault="failure(event)"/>
			<mx:method name="submissionNumber" result="submissionNumber_result(event)" fault="failure(event)"/>
			<mx:method name="getSubmissionNumberByTua" result="submissionNumber_result(event)" fault="failure(event)"/>
		</mx:RemoteObject>
		
		<mx:Label text="Automatic Results:" fontWeight="bold"
			textAlign="left" width="144" x="22.5" y="249.5"/>
		<mx:Label text="Submissions (Sent/Max):" fontWeight="bold"
			textAlign="left" width="181.15" x="456.35" y="254.5"/>
		<mx:Label text="/" fontWeight="bold"
			textAlign="left" width="20.149994" x="645.5" y="254.5" id="labelDescricao1"/>
		<mx:Label text="0" fontWeight="bold"
			textAlign="right" width="31" x="613.5" y="254.5" id="numberSubmissions" color="#048E14"/>
		<mx:Label text="0" fontWeight="bold"
			textAlign="right" width="31" x="647.5" y="254.5" id="maxNumberSubmission" color="#048E14"/>
		<mx:TextArea x="22.5" y="277.5" width="656" height="144.5" id="inputDescription"/>
		<mx:LinkButton x="224.05" y="128.5" label="   Attach Solution" icon="@Embed(source='../../image/estonar.png')" width="252.9" height="28" id="attachTest" click="fileSelect()"/>
		<mx:Label x="22.5" y="166.5" width="656" id="path" textAlign="center"/>
		<mx:Label x="19.5" y="78.5" width="88" textAlign="left" text="Team:" fontWeight="bold"/>
		<mx:Label x="19.5" y="41" width="62" textAlign="left" text="Within:" fontWeight="bold"/>
		<mx:Label x="19.5" y="11.5" width="74" textAlign="left" text="Late:" fontWeight="bold"/>
		<mx:Label x="115.5" y="78.5" width="237" id="nameTeam" textAlign="left" text="..." fontWeight="bold" color="#048E2B"/>
		<mx:Button x="258.5" y="196.5" label="   Submit Solution" width="183.9" icon="@Embed(source='../../image/disquete.png')" height="28" id="submitButtonAssignment" click="submitAssignment()"/>
		<mx:HRule x="22.5" y="232.5" width="656" height="9"/>
		<mx:HRule x="22.5" y="110.5" width="656" height="10"/>
		<mx:ComboBox x="89.5" y="39.5" width="589" id="comboAssignment" change="getTeamHasUserHasAssignmentByUserAndAssignment()" enter="getTeamHasUserHasAssignmentByUserAndAssignment()" labelField="name" click="openWithinAssignments()"></mx:ComboBox>
		<mx:ComboBox x="89.5" y="10" width="589" id="comboLateAssignment" change="getTeamHasUserHasAssignmentByUserAndAssignment()" enter="getTeamHasUserHasAssignmentByUserAndAssignment()" labelField="name" enabled="false" click="openLateAssignments()"></mx:ComboBox>
		
</les:ModuleTitleWindow>

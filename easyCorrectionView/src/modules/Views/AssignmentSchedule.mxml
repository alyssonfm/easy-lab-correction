<?xml version="1.0" encoding="utf-8"?>
<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modules.System.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="878" height="538" creationComplete="init()" title="Assignment Schedule" showCloseButton="true" close="closeWindow()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import events.ObjectEvent;
				import mx.managers.SystemManager;
				import bean.Utility.Util;
				import mx.collections.ArrayCollection;
				import events.UserEvent;
				import bean.permission.*;
				import events.EventLogResponse;
				import events.ClosePopupEvent;
				import mx.utils.Base64Decoder;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ModulesController;
				import mx.binding.utils.BindingUtils;
				//import eventos.RespostaLoginEvent;
				//import eventos.FechaPopupEvent;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
	            
	            private function failure(event:FaultEvent):void {
					var msg:String;
					try{
						if (event.fault.rootCause.message == null) {
							msg = event.fault.faultString;
						} else {
							msg = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						msg = "Service Unavailable, please restart the operation.";
					}
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, msg));
				}
				
				private function closeWindow():void {
					dispatchEvent(new ObjectEvent(null));
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				/*
				 *	Caso aconteça algum erro no acesso ao controlador, através do HttpService
				 *	então devemos mostra uma mensagem de erro
				 */
				private function eventLaunches(event:FaultEvent):void {
					var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
						event.fault, event.token, event.message);
					dispatchEvent(e);
				}
				
				private function init():void {
					
					facade.channelSet = ModulesController.createChannel("easyCorrection", ExternalInterface.call('getCanalSeguro'));
					var state: String = String(ModulesController.getParam());
					systemManager.addEventListener(ObjectEvent.ObjetoEventConst, updatesList);
					listAssignments();
					
				}
				
				private function updatesList(event:ObjectEvent):void{
					listAssignments();
				}
				
				private function saveScheduling():void{
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				private function listAssignments():void{
					facade.getOperation("listAssignments").send();
				}
				
				private function listAssignments_result(event:ResultEvent):void{
					dg_agenda.dataProvider = new ArrayCollection();
					dg_agenda.dataProvider = event.result;
					var paramMenssage: Array = new Array();
					if(AssignmentRegistration.edited){
						paramMenssage = new Array(false, "Successful Assignment Update.");
						ModulesController.createModule("modules/System/MessageStatus.swf", this, paramMenssage);
						AssignmentRegistration.edited = false;
					}
					else if(AssignmentRegistration.save){
						paramMenssage = new Array(false, "Successful Assignment Registration.");
						ModulesController.createModule("modules/System/MessageStatus.swf", this, paramMenssage);
						AssignmentRegistration.save = false;	
					}
				}
				
				private function labelGrid(item:*, column:DataGridColumn):String {
					var sLabel:String = "";
					var sHeaderText:String = column.headerText;
					switch (sHeaderText)  {
						case "Assignment":
							sLabel = item.name;
							break;
						case "Release Date":
							sLabel = Util.formatsDate(item.releaseDate);
							break;
						case "Release Time":
							sLabel = Util.unitOrganizesTime(String(item.releaseDate.getHours())) + ":" + 
								Util.unitOrganizesTime(String(item.releaseDate.getMinutes()));
							break;
						case "Delivery Date":
							sLabel = Util.formatsDate(item.deliveryDate);
							break;
						case "Delivery Time":
							sLabel = Util.unitOrganizesTime(String(item.deliveryDate.getHours())) + ":" + 
							Util.unitOrganizesTime(String(item.deliveryDate.getMinutes()));
							break;
						case "Status":
							
							break;
						case "Submissions":
							break;
					}
					return sLabel;
				}
				
				private function editAssignmentCalls():void{
					if(dg_agenda.selectedItem != null){
						var param:* = dg_agenda.selectedItem;
						ModulesController.createModule("modules/Views/AssignmentManagement.swf", this, param);
					}else{
						ModulesController.createModule("modules/Views/AssignmentManagement.swf", this, null);
					}
				}
				
				private function createsAssignment():void{
					ModulesController.createModule("modules/Views/AssignmentManagement.swf", this, null);
				}

			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="listAssignments" result="listAssignments_result(event)" fault="failure(event)"/>
		</mx:RemoteObject>
		<mx:Button x="337" y="10" click="createsAssignment()" label="   New Assignment" width="183.9" icon="@Embed(source='../../image/novo.png')" height="28" id="buttonNewAssignment" cornerRadius="20"/>
		<mx:DataGrid x="10" y="46" width="838" height="438" id="dg_agenda" labelFunction="labelGrid" itemClick="editAssignmentCalls()">
			<mx:columns>
				<mx:DataGridColumn headerText="Assignment" width="80"/>
				<mx:DataGridColumn headerText="Release Date" width="50"/>
				<mx:DataGridColumn headerText="Release Time" width="50"/>
				<mx:DataGridColumn headerText="Delivery Date" width="50"/>
				<mx:DataGridColumn headerText="Delivery Time" width="50"/>
				<mx:DataGridColumn headerText="Status" width="50"/>
				<mx:DataGridColumn headerText="Submissions" width="50"/>
			</mx:columns>
		</mx:DataGrid>
		
		
</les:ModuleTitleWindow>

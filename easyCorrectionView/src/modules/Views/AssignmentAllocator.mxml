<?xml version="1.0" encoding="utf-8"?>
<!--
	Componente para a tela de login do sistema
-->

<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modules.System.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="800" height="590" creationComplete="init()" title="Atribuição de Corretores" showCloseButton="true" close="closeWindow()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import bean.assessments.Assessment;
				import bean.team.TeamHasUserHasAssignment;
				import bean.user.User;
				import bean.assignments.AssignmentType
				import bean.Utility.CastEntities;
				import bean.assignments.Assignment;
				import mx.effects.Rotate;
				import mx.collections.ArrayCollection;
				import mx.utils.ArrayUtil;
				import events.UserEvent;
				import bean.permission.*;
				import events.EventLogResponse;
				import events.ClosePopupEvent;
				import mx.utils.Base64Decoder;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ModulesController;
				import mx.binding.utils.BindingUtils;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
	            
	            
//	            private var listaDinamicaDeEquipesCorretor:ArrayCollection = new ArrayCollection();
//	            private var listaDinamicaDeEquipesDoCorretor:ArrayCollection = new ArrayCollection();
	            
	            private var assignment: Assignment= new Assignment();
	            private var corrector:User = new User();
	            
	            private function failure(event:FaultEvent):void {
					var message:String;
					try{
						if (event.fault.rootCause.message == null) {
							message = event.fault.faultString;
						} else {
							message = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						message = "Serviço indisponível, reinicie a operação.";
					}
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
				}
				
				private function closeWindow():void {
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				/*
				 *	Caso aconteça algum erro no acesso ao controlador, através do HttpService
				 *	então devemos mostra uma mensagem de erro
				 */
				private function eventLaunches(event:FaultEvent):void {
					var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
						event.fault, event.token, event.message);
					dispatchEvent(e);
				}
				
				private function init():void {
					
					facade.channelSet = ModulesController.createChannel("easyCorrection", ExternalInterface.call('getCanalSeguro'));
					var status: String = String(ModulesController.getParam());
					teamListByAssignmentWithoutCorrector.dataProvider = new ArrayCollection();
					teamListByAssignmentCorrector.dataProvider = new ArrayCollection();					
					getClosedAssignments();
				}
				
				public function getClosedAssignments():void{
					facade.getOperation("getClosedAssignments").send();
				}
				
				public function getClosedAssignments_result(event:ResultEvent):void{
					comboAssignment.dataProvider = event.result;
					comboAssignment.selectedIndex = -1;
					getCorrectors();
				}
				
				public function getCorrectors():void{
					facade.getOperation("getCorrectors").send();
				}
				
				public function getCorrectors_result(event:ResultEvent):void{
					comboCorrectors.dataProvider = event.result;
					comboCorrectors.selectedIndex = -1;
				}
				
				private function getTeamsNoCorretorList():void{
					comboCorrectors.enabled = true;
					assignment = new Assignment();
					assignment = CastEntities.castAssignment(comboAssignment.selectedItem);
					facade.getOperation("getAssignmentWithOutCorrectorsAssessments").send(assignment.id);
				}
								
				private function getTeamsNoCorretorList_result(event:ResultEvent):void{
					teamListByAssignmentWithoutCorrector.dataProvider = event.result;
				}
				
				private function getWithCorretorTeamsList(): void {
					var param:Array = new Array();
					if(comboAssignment.selectedIndex != -1){
						if (comboCorrectors.selectedItem != -1){
							corrector = new User();
							assignment = new Assignment();
							corrector = CastEntities.castUser(comboCorrectors.selectedItem);
							assignment = CastEntities.castAssignment(comboAssignment.selectedItem);
							facade.getOperation("getAssignmentWithCorrectorsAssessments").send(assignment.id, corrector.userId);
						}
						else{
							param = new Array(true, "Selecione também o Corretor.");
							ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
						}
					}
					else{
						param = new Array(true, "Selecione também o roteiro.");
						ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
					}
					
				}
				
				public function getWithCorretorTeamsList_result(event:ResultEvent):void{
					teamListByAssignmentCorrector.dataProvider = event.result;
				}
								
				private function exposesEvaluationTeam(item: *): String{
                	return item.submission.teamHasUserHasAssignment.team.name;
                }

				private function allocatesTheCorretorTeam():void{
					var param:Array = new Array();
					if (teamListByAssignmentWithoutCorrector.selectedIndex != -1){
						var assessm: Assessment = CastEntities.castAssessment(teamListByAssignmentWithoutCorrector.selectedItem);
						if(comboCorrectors.selectedIndex != -1){
							assessm.corrector = CastEntities.castUser(comboCorrectors.selectedItem);
							facade.getOperation("allocateCorrector").send(assessm);		
						}
						else{
							messageDisplays("Selecione também o corretor.");
						}
					}
					else{
						messageDisplays("Selecione uma equipe.");
					}
				}
				
				private function deallocatesTheCorretorTeam():void{
					var param:Array = new Array();
					if (teamListByAssignmentCorrector.selectedIndex != -1){
						var assessm: Assessment = CastEntities.castAssessment(teamListByAssignmentCorrector.selectedItem);
						if(comboCorrectors.selectedIndex != -1){
							assessm.corrector = null;
							facade.getOperation("allocateCorrector").send(assessm);		
						}
						else{
							messageDisplays("Selecione também o corretor.");
						}
					}
					else{
						messageDisplays("Selecione uma equipe para desalocar.");
					}
				}
				
				private function updateStatus_result(event:ResultEvent):void{
					getTeamsNoCorretorList();
					getWithCorretorTeamsList();
				}
				
				private function teamSelectsAllocated(): void{
					var assessment: Assessment = CastEntities.castAssessment(teamListByAssignmentCorrector.selectedItem);
					selectTeam(assessment);
				}
				
				private function teamSelectsDeallocated(): void{
					var assessment: Assessment = CastEntities.castAssessment(teamListByAssignmentWithoutCorrector.selectedItem);
					selectTeam(assessment);
				}
				
				private function selectTeam(assessment: Assessment):void{
					var tua: TeamHasUserHasAssignment = assessment.submission.teamHasUserHasAssignment;
					facade.getOperation("getTeamHasUserHasAssignmentByTeamAndAssignment").send(tua.team.id, tua.assignment.id);
				}
				
				private function getTeamHasUserHasAssignmentByTeamAndAssignment_result(event:ResultEvent):void{
					membresList.dataProvider = new ArrayCollection(); 
					membresList.dataProvider = event.result;
				}
				
				private function selecaoLabelIntegrantes(item: *): String{
					return item.user.name;
				}
				
				private function messageDisplays(message: String): void{
					var param:Array = new Array(true, message);
					ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
				}
				
			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
		
			<mx:method name="getClosedAssignments" result="getClosedAssignments_result(event)" fault="failure(event)"/>
			<mx:method name="getCorrectors" result="getCorrectors_result(event)" fault="failure(event)"/>
			<mx:method name="getAssignmentWithOutCorrectorsAssessments" result="getTeamsNoCorretorList_result(event)" fault="failure(event)"/>
			<mx:method name="getAssignmentWithCorrectorsAssessments" result="getWithCorretorTeamsList_result(event)" fault="failure(event)"/>
			<mx:method name="allocateCorrector" result="updateStatus_result(event)" fault="failure(event)"/>
			<mx:method name="getTeamHasUserHasAssignmentByTeamAndAssignment" result="getTeamHasUserHasAssignmentByTeamAndAssignment_result(event)" fault="failure(event)"/>
			
		</mx:RemoteObject>
		
		<mx:Label text="Corretor:" fontWeight="bold"
			textAlign="left" width="74" x="394" y="22"/>
		<mx:Label text="Roteiro:" fontWeight="bold"
			textAlign="left" width="64" x="10" y="22"/>
		<mx:Label text="Equipes:" fontWeight="bold"
			textAlign="left" width="63" x="10" y="72"/>
		<comp:ComboBoxAC labelField="name" x="73" y="21" width="304" change="getTeamsNoCorretorList()" id="comboAssignment"/>
		<comp:ComboBoxAC labelField="name" x="476" y="21" width="294" change="getWithCorretorTeamsList()" id="comboCorrectors" enabled="false"/>
		<mx:HRule x="10" y="61" width="760" height="3"/>
		<mx:List id="teamListByAssignmentWithoutCorrector" x="10" y="100" width="352" height="295" labelFunction="exposesEvaluationTeam" itemClick="teamSelectsDeallocated()"/>
		<mx:Label text="Equipes Selecionadas:" fontWeight="bold" textAlign="left" width="155" x="418" y="72"/>
		<mx:List id="teamListByAssignmentCorrector" x="418" y="100" width="352" height="295" labelFunction="exposesEvaluationTeam" itemClick="teamSelectsAllocated()"></mx:List>
		<mx:Button x="370" y="201" width="40" click="allocatesTheCorretorTeam()" height="40" icon="@Embed(source='../../image/right.png')" fontStyle="normal" fontWeight="bold" fillAlphas="[0.0, 0.0, 0.0, 0.0]" fillColors="[#FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF]" borderColor="#FFFFFF" cornerRadius="20" themeColor="#37612B"/>
		<mx:Button x="370" y="249" width="40" click="deallocatesTheCorretorTeam()" height="40" icon="@Embed(source='../../image/left.png')" fontStyle="normal" fontWeight="bold" fillAlphas="[0.0, 0.0, 0.0, 0.0]" fillColors="[#FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF]" borderColor="#FFFFFF" cornerRadius="20" themeColor="#37612B"/>
		<mx:Label text="Total de Equipes sem Avaliador:" fontWeight="bold"
			textAlign="left" width="219" x="10" y="516"/>
		<mx:Label text="Total de Equipes alocadas por corretor:" fontWeight="bold"
			textAlign="left" width="266" x="418" y="516" id="labelTitulo5"/>
		<mx:Label text="{teamListByAssignmentCorrector.dataProvider.length}" fontWeight="bold"
			textAlign="left" width="78" x="692" y="516" id="labelTitle6"/>
		<mx:Label text="{teamListByAssignmentWithoutCorrector.dataProvider.length}" fontWeight="bold"
			textAlign="left" width="63" x="237" y="516" id="labelTitle4"/>
		<mx:Label text="Integrantes: " fontWeight="bold"
			textAlign="left" width="93.04999" x="10" y="403" height="20"/>
		<mx:List id="membresList" x="10" y="424" width="760" height="84" labelFunction="selecaoLabelIntegrantes"/>
		
		
</les:ModuleTitleWindow>

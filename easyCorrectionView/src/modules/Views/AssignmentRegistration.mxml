<?xml version="1.0" encoding="utf-8"?>
<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modules.System.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="800" height="640" creationComplete="init()" title="Register Assignment" showCloseButton="true" close="closeWindow()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import bean.assignments.AssignmentType;
				import bean.user.UserGroup;
				import bean.permission.Group;
				import bean.user.User;
				import events.AssignmentEvent;
				import bean.Utility.Constant;
				import events.ObjectEvent;
				import bean.Utility.Util;
				import bean.Utility.CastEntities;
				import bean.assignments.Assignment;
				import bean.system.SystemStage;
				import mx.skins.halo.NumericStepperUpSkin;
				import mx.collections.ArrayCollection;
				import events.UserEvent;
				import events.EventLogResponse;
				import events.ClosePopupEvent;
				import mx.utils.Base64Decoder;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ModulesController;
				import mx.binding.utils.BindingUtils;
				//import eventos.RespostaLoginEvent;
				//import eventos.FechaPopupEvent;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
				
				private static const millisecondsPerDay : int = 1000 * 60 * 60 * 24;
				
				private var fileRefTests:FileReference;
				private var requestTests: URLRequest;
				private var fileRefEnvironment:FileReference;
				private var requestEnvironment: URLRequest;
				private const FILE_UPLOAD_URL:String = Constant.urlUploadDonwload;
				
				public static var edited: Boolean = false;
				public static var save: Boolean = false; 
				
				private var assignment:Assignment = new Assignment();
				private var stat:*;
				private var doUpload: Boolean = false;
				private var isCreate: Boolean = false;
				private var urlTests: String = "";
				private var urlEnvironment: String = "";
				private var paramMessage:Array;
				private var currentGroupUser: UserGroup = new UserGroup();
	            
	            private function failure(event:FaultEvent):void {
					var message:String;
					try{
						if (event.fault.rootCause.message == null) {
							message = event.fault.faultString;
						} else {
							message = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						message = "Service Unavailable, please restart the operation.";
					}
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
				}
				
				private function closeWindow():void {
					dispatchEvent(new ObjectEvent(""));
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				/*
				 *	Caso aconteça algum erro no acesso ao controlador, através do HttpService
				 *	então devemos mostra uma mensagem de erro
				 */
				private function launchEvent(event:FaultEvent):void {
					var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
						event.fault, event.token, event.message);
					dispatchEvent(e);
				}
				
				private function init():void {
					
					facade.channelSet = ModulesController.createChannel("easyCorrection", ExternalInterface.call('getCanalSeguro'));
					stat = ModulesController.getParam();
					systemManager.addEventListener(AssignmentEvent.AssignmentEventConst, updateFields);
					dfMaximumDate.selectedDate = new Date(new Date().getTime()+(7*millisecondsPerDay));
					dfDiscussionDate.selectedDate = new Date(new Date().getTime()+(21*millisecondsPerDay));
					listAssignmentType();
				}
				
				private function updateFields(event:AssignmentEvent):void{
					var tempAssignment: Assignment = event.assignment;
					setAssignmentsAttributes(tempAssignment);
				}
				
				private function listAssignmentType():void{
					facade.getOperation("listAssignmentType").send();
				}
				
				private function listAssignmentType_result(event:ResultEvent):void{
					comboType.dataProvider = event.result;
					if(stat != null){
						getAssignment();
						updateAssignmentButton.visible = true;
						createAssignmentButton.visible = false;
					}else{
						updateAssignmentButton.visible = false;
						createAssignmentButton.visible = true;
					}
					getUser();
				}
				
				private function getUser():void{
					var userId: int = SharedObject.getLocal("sistema", "/").data.idUsuario;
					facade.getOperation("getUserGroupByUserIdAndCurrentStageId").send(userId);	
				}
				
				private function getUserGroupByUserIdAndCurrentStageId_result(event:ResultEvent):void{
					var ugList: ArrayCollection = event.result as ArrayCollection;
					currentGroupUser = CastEntities.castUserGroup(ugList.getItemAt(0)); 
				}
				
				private function getAssignment():void{
					assignment = new Assignment();
					assignment = CastEntities.castAssignment(stat);
					inputDescription.text = assignment.description;

					var discussionDate: Date = assignment.discussionDate as Date;
					inputDiscussionHour.text = Util.unitOrganizesTime(String(discussionDate.getHours()));
					inputDiscussionMinute.text = Util.unitOrganizesTime(String(discussionDate.getMinutes()));
					dfDiscussionDate.selectedDate = discussionDate;
					dfDiscussionDate.text = Util.formatsDate(assignment.discussionDate);
					
					var timeLimit: Date = assignment.deliveryDate as Date;
					inputHour.text = Util.unitOrganizesTime(String(timeLimit.getHours()));
					inputMinute.text = Util.unitOrganizesTime(String(timeLimit.getMinutes()));
					dfMaximumDate.selectedDate = timeLimit;
					dfMaximumDate.text = Util.formatsDate(assignment.deliveryDate);
					
					var releaseTime: Date = assignment.releaseDate as Date;
					inputReleaseTime.text = Util.unitOrganizesTime(String(releaseTime.getHours()));
					inputMinuteRelease.text = Util.unitOrganizesTime(String(releaseTime.getMinutes()));
					dfReleaseDate.selectedDate = releaseTime;
					dfReleaseDate.text = Util.formatsDate(assignment.releaseDate);
					
					setAssignmentsAttributes(assignment);
					
				}
				
				private function setAssignmentsAttributes(assign: Assignment): void{
					inputDescription.text = assign.description;
					pathEnvironment.text = assign.interfaceDirectory;
					pathTests.text = assign.testsDirectory;
					inputTitle.text = assign.name;
					inputMaxNumberSent.text = String(assign.sendMaxNumber);
					inputMaxTeam.text = String(assign.participantsMaxNumber);
					inputPenalty.text = String(assign.penaltyPerDaysLate);
					inputPercentage.text = String(assign.automaticTestsPercentage);
					inputTimeout.text = String(assign.testTimeLimit);
					comboType.selectedIndex = Util.objectTakesPost("id", ArrayCollection(comboType.dataProvider), assign.assignmentType);	
				}
				
				private function chooseFileTests(): void{
					fileRefTests = new FileReference();
			   	 	fileRefTests.addEventListener(Event.SELECT, selectedFileTests);
			   	 	fileRefTests.addEventListener(Event.COMPLETE, fullSendingTests);
			   	 	fileRefTests.addEventListener(IOErrorEvent.IO_ERROR, sendErrorTests);
			    	fileRefTests.browse(new Array(new FileFilter("Tests (*.zip)","*.zip")));
				}
				
				public function sendErrorTests(evt:Event):void {
			       	var param:Array = new Array(true, "An error ocurred during the file transmission. The test files were not sent." +
														"\n\nPlease, try again." + 
														"\n\nIf this error persists verify your internet connection.");
					ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
				}
				
				public function selectedFileTests(evt:Event):void {
			       	requestTests = new URLRequest(FILE_UPLOAD_URL);
			       	pathTests.text = fileRefTests.name;
				}
				
				public function fullSendingTests(evt:Event):void {
					requestTests = new URLRequest(FILE_UPLOAD_URL);
					var variables:URLVariables = new URLVariables();
					variables.url = urlEnvironment;
					variables.fileName = pathEnvironment.text;
					requestEnvironment.data = variables;
					fileRefEnvironment.upload(requestEnvironment);
				}
				
				public function saveAssignment(): void{
					dispatchEvent(new ClosePopupEvent(this));
				}
				
				private function selectFileEnvironment(): void{
					fileRefEnvironment = new FileReference();
			   	 	fileRefEnvironment.addEventListener(Event.SELECT, selectedFileEnvironment);
			   	 	fileRefEnvironment.addEventListener(Event.COMPLETE, fullSendingEnvironment);
			   	 	fileRefEnvironment.addEventListener(IOErrorEvent.IO_ERROR, errorSendingEnvironment);
			    	fileRefEnvironment.browse(new Array(new FileFilter("Testes (*.zip)","*.zip")));
				}
				
				public function errorSendingEnvironment(evt:Event):void {
			       	var param:Array = new Array(true, "An error ocurred during the file transmission. The test files were not sent." +
														"\n\nPlease, try again." + 
														"\n\nIf this error persists verify your internet connection.");
					ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
				}
				
				public function selectedFileEnvironment(evt:Event):void {
			       	requestEnvironment = new URLRequest(FILE_UPLOAD_URL);
			       	pathEnvironment.text = fileRefEnvironment.name;
				}
				
				public function fullSendingEnvironment(evt:Event):void {
				}
				
				private function fillsAssignment():void{
					var dateDiscussion: Date = Util.formatsDateStringToDate(dfDiscussionDate.text);
					dateDiscussion.setHours(Number(inputDiscussionHour.text), Number(inputDiscussionMinute.text),0,0);
					assignment.discussionDate = dateDiscussion;
					
					var deliveryDeadline: Date = Util.formatsDateStringToDate(dfMaximumDate.text);
					deliveryDeadline.setHours(Number(inputHour.text), Number(inputMinute.text),0,0);						
					assignment.deliveryDate = deliveryDeadline;
					 
					var releaseDate: Date = Util.formatsDateStringToDate(dfReleaseDate.text);
					releaseDate.setHours(Number(inputReleaseTime.text), Number(inputMinuteRelease.text),0,0);
					assignment.releaseDate = releaseDate;
					
					assignment.description = inputDescription.text;
					assignment.name = inputTitle.text;
					assignment.interfaceDirectory = "/periodo" + currentGroupUser.systemStage.semester + "/environment/" + assignment.id + "/";
					assignment.testsDirectory = "/periodo" + currentGroupUser.systemStage.semester + "/testes/" + assignment.id + "/";
					assignment.sendMaxNumber = int(inputMaxNumberSent.text);
					assignment.participantsMaxNumber = int(inputMaxTeam.text);
					assignment.penaltyPerDaysLate = Util.formatsTextValueToNumber(inputPenalty.text);
					assignment.stage = currentGroupUser.systemStage;
					assignment.automaticTestsPercentage = Util.formatsTextValueToNumber(inputPercentage.text);
					assignment.testTimeLimit = int(inputTimeout.text);
					assignment.assignmentType = CastEntities.castAssignmentType(comboType.selectedItem);
					
				}
				
				private function CzechTime(): Boolean{
					try{
						if( Number(inputHour.text) > 23 ||
							Number(inputMinute.text) > 59){
							return false;
						}
					}catch(e: Error){
						return false;
					}
					return true;
				}
				
				private function updateAssignment():void{
					if(assignment.id != 0){
						if (CzechTime()){
							fillsAssignment();
							isCreate = false;
							facade.getOperation("updateAssignment").send(CastEntities.castAssignment(assignment));
						}
						else{
							var param:Array = new Array(true, "Invalid Delivery deadline time (interval: 00:00 ~ 23:59)");
							ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
						}	
					}					
				}
				
				private function saveAssignments():void{
					var validTime: Boolean = CzechTime();
					if (CzechTime()){
						assignment = new Assignment();
						fillsAssignment();
						isCreate = true;
						facade.getOperation("saveAssignment").send(CastEntities.castAssignment(assignment));
					}
					else{
						var param:Array = new Array(true, "Invalid Delivery deadline time (interval: 00:00 ~ 23:59)");
						ModulesController.createModule("modules/System/MessageStatus.swf", this, param);
					}
				}
				
				private function saveAssignment_result(event:ResultEvent):void{
					assignment = new Assignment();
					assignment = CastEntities.castAssignment(event.result);
					urlTests = "/periodo" + currentGroupUser.systemStage.semester + "/testes/" + assignment.id + "/";
					urlEnvironment = "/periodo" + currentGroupUser.systemStage.semester + "/environment/" + assignment.id + "/";
					if (!isCreate){
						try{
							var variables:URLVariables = new URLVariables();
							variables.url = urlTests;
							variables.fileName = "testes.zip";
							requestTests.data = variables;
							fileRefTests.upload(requestTests);
						}catch(e: Error){}
						if(!doUpload){
							edited = true;
							closeWindow();
						} 
					}
					else{
						doUpload = true;
						updateAssignment();
						save = true;
						closeWindow();
					}
				}
				
				private function datesUpdatedDefaut():void{
					var dateAux: String = dfReleaseDate.text;
					dfMaximumDate.selectedDate = new Date(dfReleaseDate.selectedDate.getTime()+(7*millisecondsPerDay));
					dfDiscussionDate.selectedDate = new Date(dfReleaseDate.selectedDate.getTime()+(21*millisecondsPerDay));
				}
				
				private function openAssignmentImporter():void{ 
					ModulesController.createModule("modules/Views/AssignmentImporter.swf", this, currentGroupUser.systemStage.course);
				}
				
				private function changeAssignmentType():void{ 
					var assignmentType: AssignmentType = CastEntities.castAssignmentType(comboType.selectedItem);
					if (!assignmentType.outputComparison && !assignmentType.testExecution){
						inputPercentage.text = "0";
						inputPercentage.enabled = false;						
						inputTimeout.text = "5000";
						inputTimeout.enabled = false;
					}
					else{
						inputPercentage.text = "100";
						inputPercentage.enabled = true;
						inputTimeout.text = "5000";
						inputTimeout.enabled = true;
					}
				}
				
			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="getUserGroupByUserIdAndCurrentStageId" result="getUserGroupByUserIdAndCurrentStageId_result(event)" fault="failure(event)"/>
			<mx:method name="saveAssignment" result="saveAssignment_result(event)" fault="failure(event)"/>
			<mx:method name="updateAssignment" result="saveAssignment_result(event)" fault="failure(event)"/>
			<mx:method name="listAssignmentType" result="listAssignmentType_result(event)" fault="failure(event)"/>
		</mx:RemoteObject>
		
		<mx:Label text="Name:" fontWeight="bold"
			textAlign="left" width="54" x="10" y="12" id="labelTitle"/>
		<mx:Label text="Type:" fontWeight="bold"
			textAlign="left" width="44" x="10" y="43" id="labelTitle0"/>
		<mx:Label text="Automatic assessment percentage:" fontWeight="bold"
			textAlign="left" width="270" x="10" y="363"/>
		<mx:Label text="%" fontWeight="bold"
			textAlign="left" width="20" x="384" y="363"/>
		<mx:Label text="Text Description:" fontWeight="bold"
			textAlign="left" width="130" x="10" y="83" id="labelDescription"/>
		<mx:TextInput x="62" y="10" id="inputTitle" width="605" maxChars="250"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"		
		toolTip="" x="538" y="41" width="129" id="dfReleaseDate" text="{df.format(new Date())}" change="datesUpdatedDefaut()"/>
		<mx:TextInput x="675" y="41" id="inputReleaseTime" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="724" y="41" id="inputMinuteRelease" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:DateFormatter id="df" formatString="DD/MM/YYYY"/>
		<mx:TextArea x="10" y="111" width="760" height="122" id="inputDescription" maxChars="30000"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"
		toolTip="" x="219" y="256" width="129" id="dfMaximumDate"/>
		<mx:TextInput x="356" y="256" id="inputHour" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="405" y="256" id="inputMinute" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"
		toolTip="" x="219" y="286" width="129" id="dfDiscussionDate"/>
		<mx:TextInput x="356" y="286" id="inputDiscussionHour" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="405" y="286" id="inputDiscussionMinute" width="28" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="723" y="284" id="inputMaxTeam" width="47" restrict="[0-9]" maxChars="2" text="1"/>
		<mx:TextInput x="723" y="254" id="inputMaxNumberSent" width="47" restrict="[0-9]" maxChars="2" text="3"/>
		<extra:DecimalInput x="219" y="318"  precision="2" restrict="'0-9'" useThousandsSeparator="true" currencyFormat="br" enabled="true" id="inputPenalty" width="113" text="0.5"/>
		<extra:DecimalInput x="285" y="361"   precision="2" restrict="'0-9'" useThousandsSeparator="true" currencyFormat="br" enabled="true" id="inputPercentage" width="91" text="100"/>
		<mx:TextInput x="641" y="363" id="inputTimeout" width="95" restrict="[0-9]" maxChars="2" text="5000"/>
		<mx:Label text="Team Members max number:" fontWeight="bold"
			textAlign="left" width="239" x="476" y="288" id="labelAutomatic0"/>
		<mx:Label text="Penalty per day late:" fontWeight="bold"
			textAlign="left" width="201" x="10" y="320"/>
		<mx:Label text="Submission max number:" fontWeight="bold"
			textAlign="left" width="191" x="476" y="258" id="labelAutomatic3"/>
		<mx:Label text="Execution time-limit:" fontWeight="bold"
			textAlign="left" width="160" x="476" y="365" id="labelAutomatic5"/>
		<mx:Label text="ms" fontWeight="bold"
			textAlign="left" width="27" x="744" y="365"/>
		<mx:Label text="H" fontWeight="bold"
			textAlign="left" width="17" x="387" y="258" id="labelAutomatica8"/>
		<mx:Label text="M" fontWeight="bold"
			textAlign="left" width="17" x="434" y="258" id="labelAutomatica7"/>
		<mx:Label text="H" fontWeight="bold"
			textAlign="left" width="17" x="387" y="288" id="labelAutomatica11"/>
		<mx:Label text="M" fontWeight="bold"
			textAlign="left" width="17" x="434" y="288" id="labelAutomatica12"/>
		<mx:Label text="Delivery deadline date:" fontWeight="bold"
			textAlign="left" width="201" x="10" y="258" id="labelAutomatic1"/>
		<mx:Label text="Discussion deadline date:" fontWeight="bold"
			textAlign="left" width="201" x="10" y="288" id="labelAutomatic2"/>
		<mx:Label text="Release Date:" fontWeight="bold"
			textAlign="left" width="101" x="429" y="43" id="labelAutomatic4"/>
		<mx:HRule x="10" y="397" width="760"/>
		<mx:HRule x="10" y="241" width="760"/>
		<mx:HRule x="10" y="350" width="760"/>
		<mx:HRule x="10" y="73" width="760"/>
		<mx:LinkButton x="263.55" y="407" label="   Attach Automatic Tests" icon="@Embed(source='../../image/estonar.png')" width="252.9" height="28" id="attachTesting" click="chooseFileTests()"/>
		<mx:Label x="10" y="439" width="760" id="pathTests" textAlign="center"/>
		<mx:LinkButton x="250.5" y="467" label="   Attach Development Environment" width="279.5" icon="@Embed(source='../../image/estonar.png')" height="28" id="attachEnvironment" click="selectFileEnvironment()"/>
		<mx:Label x="10" y="503" width="760" id="pathEnvironment" textAlign="center"/>
		<mx:Button x="298.05" y="543" label="Update Assignment" width="183.9" icon="@Embed(source='../../image/atualiza.png')" height="28" id="updateAssignmentButton" click="updateAssignment()"/>
		<mx:Button x="298.05" y="543" label="   Save Assignment" width="183.9" icon="@Embed(source='../../image/disquete.png')" height="28" id="createAssignmentButton" click="saveAssignments()"/>
		<mx:Label text="H" fontWeight="bold"
			textAlign="left" width="17" x="706" y="43" id="labelAutomatica20"/>
		<mx:Label text="M" fontWeight="bold"
			textAlign="left" width="17" x="753" y="43" id="labelAutomatica10"/>
		<mx:ComboBox x="62" y="41" width="329" id="comboType" labelField="name" change="changeAssignmentType()"></mx:ComboBox>
		<mx:Button x="675" y="11" label="Import" width="95" click="openAssignmentImporter()"/>
		
		
		
</les:ModuleTitleWindow>

<?xml version="1.0" encoding="utf-8"?>
<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modules.System.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	layout="absolute" width="644" height="476" title="Registration" creationComplete="init()" showCloseButton="true" close="closeWindow()">
	<les:states>
		<mx:State name="teacherState">
			<mx:RemoveChild target="{tabNav}"/>
			<mx:AddChild position="lastChild">
				<mx:ComboBox prompt="select..." x="66" y="10" width="548" labelField="name" id="cbUserGroupState" toolTip="{toolTipUserGroup}" change="filtrateUserByGroup()"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="64" y="71" width="548" id="inputUserNameState" toolTip="{toolTipUserName}" change="handleValidaUsuario(null)"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="64" y="100.5" width="348" id="inputUserLoginState" toolTip="{toolTipUserLogin}" change="handleValidaUsuario(null)"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="500" y="100.5" width="112" id="inputUserPasswordState" displayAsPassword="true"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="243.5" y="162.5" label="   Save" click="saveUserGroup()" icon="@Embed(source='../../image/disquete.png')" width="135" id="saveUserButtonState" height="28" enabled="false"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="100.5" y="162.5" label="   New" width="135" height="28" id="newUserButtonState" click="changeSaver()" icon="@Embed(source='../../image/novo.png')"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="386.5" y="162.5" label="   Delete" click="removeUser()" icon="@Embed(source='../../image/delete.png')" width="135" id="removeUserButtonState" height="28"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="243.5" y="162.5" label="   Update" click="verifyUser()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="updateUserButtonState" height="28"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="12" y="11.5" text="Group:" id="labelUserGroupState"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="10" y="73" text="Name:" id="labelUserNameState"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="12" y="102.5" text="Login:" id="labelUserLoginState"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="64" y="130.5" width="548" id="inputUserEmailState" toolTip="{toolTipUserEmail}" change="handleValidaUsuario(null)"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="12" y="132.5" text="Email:" id="labelUserEmailState"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="420" y="102.5" text="Password:" id="labelUserPasswordState"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:DataGrid x="10" y="198.5" width="602" height="223.5" draggableColumns="false" change="selectUser()" itemClick="selectUser()"
						 labelFunction="labelGridUsers" id="dgUsersState">
					<mx:columns>
						<mx:DataGridColumn headerText="Login" dataField="id" width="200"/>
						<mx:DataGridColumn headerText="Username"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:ComboBox prompt="select..." x="64" y="40" width="550" labelFunction="showStage" id="cbSystemStageState" toolTip="{toolTipSystemStage}"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="12" y="41.5" text="Class:" id="labelClassState"/>
			</mx:AddChild>
		</mx:State>
	</les:states>
	
	<mx:Script>
		<![CDATA[
			import bean.system.SystemStage;
			import events.ClosePopupEvent;
			import bean.permission.Menu;
			import bean.permission.MenuFunction;
			import bean.permission.Group;
			import bean.user.UserGroup;
			import bean.user.User;
			import bean.Utility.Util;
			import bean.Utility.CastEntities;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.validators.EmailValidator;
			import Scripts.ModulesController;
			
			[Bindable]
			private var toolTipMenuName:String = 
				"(Obrigatório) Informe o nome do menu.";
			
			[Bindable]
			private var toolTipLabelMenu:String = 
				"(Obrigatório) Informe um rótulo para o menu.";
				
			[Bindable]
			private var toolTipMenuFunction:String = 
				"(Obrigatório) Informe o menu da função.";
				
			[Bindable]
			private var toolTipStageCourse:String = 
				"(Obrigatório) Informe a disciplina da turma.";
				
			[Bindable]
			private var toolTipStageClass:String = 
				"(Obrigatório) Informe a turma.";
				
			[Bindable]
			private var toolTipStagePeriod:String = 
				"(Obrigatório) Informe o período da turma.";
			
			[Bindable]
			private var toolTipNameFunction:String = 
				"(Obrigatório) Informe o nome para a função.";
				
			[Bindable]
			private var toolTipLabelFunction:String = 
				"(Obrigatório) Informe uma rótulo para a função.";
				
			[Bindable]
			private var toolTipGroupName:String = 
				"(Obrigatório) Informe um nome para Grupo.";
				
			[Bindable]
			private var toolTipSystemStage:String = 
				"(Obrigatório) Informe uma turma para o Usuário.";
				
			[Bindable]
			private var toolTipUserName:String = 
				"(Obrigatório) Informe um nome para o Usuário.";
			
			[Bindable]
			private var toolTipUserLogin:String = 
				"(Obrigatório) Informe um login para o Usuário.";
				
			[Bindable]
			private var toolTipUserPassword:String = 
				"(Obrigatório) Informe uma senha para o Usuário.";
			
			[Bindable]
			private var toolTipUserEmail:String = 
				"(Obrigatório) Informe um email para o Usuário.";
				
				
			[Bindable]
			private var toolTipUserGroup:String = 
				"(Obrigatório) Informe um grupo para o Usuário.";
			
			
			private var menus: ArrayCollection = new ArrayCollection();
			private var groups: ArrayCollection = new ArrayCollection();
			private var stages: ArrayCollection = new ArrayCollection();
			
			private var menu: Menu = new Menu();
			private var systemStage: SystemStage = new SystemStage();
			private var func: MenuFunction = new MenuFunction();
			private var group: Group = new Group();
			private var user: User = new User();
			private var userGroup: UserGroup = new UserGroup();
			private var loggedUser: *;
			private var validEmail: Boolean;
			private var firstEntry: Boolean = false;
			private var loggedAssistant: Boolean = false;
			private var passwordSaved: String = "";
			private var generatedPassword: String = "";
			
			private var emailChanged: Boolean = false;
			
			[Bindable]
			private var message:String;
			
			[Bindable]
			private var contact:String;
			
			[Bindable]
			private var userName:String;
			
			[Bindable]
			private var subject: String = "[ELC] Easy Lab Correction Registration";			
			
			
			
			private function init():void {
				facade.channelSet = ModulesController.createChannel("easyCorrection", ExternalInterface.call('getCanalSeguro'));
				loggedUser = ModulesController.getParam();
				getUserGroup();
				getSystemStageList();
			}
			
			private function getSystemStageList(): void{
				facade.getOperation("systemStageList").send();
			}
			
			private function systemStageList_result(event:ResultEvent):void {
				stages = event.result as ArrayCollection;
				if (tabNav.selectedIndex == 0){
					cbSystemStage.dataProvider = stages;
					cbSystemStage.selectedIndex = -1;
				}
				if (tabNav.selectedIndex == 4){
					dgStages.dataProvider = stages;
				}
			}
			
			private function getUserGroup(): void{
				facade.getOperation("getUserGroupByUser").send(loggedUser.userId);
			}
			
			private function getUserGroupByUser_result(event:ResultEvent):void {
				var userGroupList: * = event.result as ArrayCollection;
				if (userGroupList.getItemAt(0).group.name.toUpperCase() == "INSTRUCTOR"
					|| userGroupList.getItemAt(0).group.name.toUpperCase() == "ASSISTANT"){
					if(userGroupList.getItemAt(0).group.name.toUpperCase() == "ASSISTANT") loggedAssistant = true;
					currentState = "teacherState";
					tabNav.visible = true;
					emailValidator.source = inputUserEmailState;
					emailValidator.trigger = inputUserEmailState;
					groupList();
				}
				else{
					tabNav.visible = true;
					selectTab();
				}
			}
			
			
			private function closeWindow(): void{
				dispatchEvent(new ClosePopupEvent(this));
			}
			
			private function selectTab():void {
				clearFieldsByTab();
				if (tabNav.selectedIndex == 1){
					groupList();
				} 
				else 
					if (tabNav.selectedIndex == 0) {
						groupList();
					}
					else {
						if(tabNav.selectedIndex == 4){
							getSystemStageList();
						}
						else menuList();
					}	
			}
			
			private function failure(event:FaultEvent):void {
				var message:String;
				try{
					if (event.fault.rootCause.message == null) {
						message = event.fault.faultString;
					} else {
						message = event.fault.rootCause.message;
					}
				}
				catch(e:Error){
					message = "Service unavailable, please restart the operation.";
				}
				ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
			}
			
			private function menuFailure(event:FaultEvent):void {
				var message:String = "It is not possible to finish this operation. There are Functions registered to this Menu.";
				launchException(new Array(true, message));
			}
			
			private function groupFailure(event:FaultEvent):void {
				var message:String = "It is not possible to finish this operation. There are Users registered to this Group.";
				launchException(new Array(true, message));
			}
			
			private function launchException(params: Array): void{
				ModulesController.createModule("modules/System/MessageStatus.swf", this, params);
			}
			
			private function menuList(): void{
				facade.getOperation("menuList").send();				
			}
			
			private function menuList_result(event:ResultEvent):void {
				menus = event.result as ArrayCollection;
				if (tabNav.selectedIndex == 2){
					if (menus == null) {
						menus = new ArrayCollection();
						menus.addItem(event.result);
					}
					dgMenus.dataProvider = menus;
				}
				if (tabNav.selectedIndex == 3){
					cbMenu.dataProvider = menus;
					cbMenu.selectedIndex = -1;
					functionList();
				}
			}
			
			
			private function functionList():void{
				facade.getOperation("functionList").send()
			}
			
			private function functionList_result(event:ResultEvent):void{
				dgFunctions.dataProvider = event.result; 
			}
			
			private function groupList():void{
				facade.getOperation("groupList").send()
			}
			
			private function groupList_result(event:ResultEvent):void{
				groups = event.result as ArrayCollection;
				var auxGroup: ArrayCollection = new ArrayCollection();
				if (currentState == "teacherState"){
					for(var i: int = 0; i < groups.length; i++){
						if(groups.getItemAt(i).name.toUpperCase() != "INSTRUCTOR" && groups.getItemAt(i).name.toUpperCase() != "ADMINISTRADOR"){
							if(!loggedAssistant){
								auxGroup.addItem(groups.getItemAt(i));	 
							}
							else{
								if(groups.getItemAt(i).name.toUpperCase() != "ASSISTANT"){
									auxGroup.addItem(groups.getItemAt(i));
								}
							}
						}
					}
					cbUserGroupState.dataProvider = auxGroup;
					if (groups.length != 0){
						cbUserGroupState.selectedIndex = 0;
						filtrateUserByGroup();
					}
					else{
						cbUserGroupState.selectedIndex = -1;
					}
				}
				else{
					if (tabNav.selectedIndex == 1){
						if (groups == null) {
							groups = new ArrayCollection();
							groups.addItem(event.result);
						}
						dgGroups.dataProvider = groups;
					}
					if (tabNav.selectedIndex == 0){
						cbUserGroup.dataProvider = groups;
						if (groups.length != 0){
							cbUserGroup.selectedIndex = 0;
							filtrateUserByGroup();
						}
						else{
							cbUserGroup.selectedIndex = -1;
						}
					}
				}
			}
			
			private function labelGridMenus(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Name":
						sLabel = item.name;
						break;
					case "Label":
						sLabel = item.label;
						break;
				}
				return sLabel;
			}
			
			private function labelGridStages(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Course":
						sLabel = item.course;
						break;
					case "Class":
						sLabel = item.courseClass;
						break;
					case "Period":
						sLabel = item.semester;
						break;
				}
				return sLabel;
			}
			
			private function labelGridFunctions(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Label":
						sLabel = item.label;
						break;
					case "Name":
						sLabel = item.name;
						break;
				}
				return sLabel;
			}
			
			private function labelGridGroups(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Grupo":
						sLabel = item.name;
						break;
				}
				return sLabel;
			}
			
			private function labelGridUsers(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Login":
						sLabel = item.user.login;
						break;
					case "Name":
						sLabel = item.user.name;
						break;
				}
				return sLabel;
			}
			
			private function showStage(item:*):String {
				return item.course + " - " + item.semester + " (" + item.courseClass + ")";
			}
			
			private function saveMenu(): void{
				menu = new Menu();
				updateMenu();
			}
			
			private function updateMenu():void {
				menu.name = StringUtil.trim(inputMenuName.text);
				menu.label = StringUtil.trim(inputMenuLabel.text);
				if(menu.menuId == 0){
					facade.getOperation("saveMenu").send(menu);
				}else{
					facade.getOperation("updateMenu").send(menu);
				}
			}
			
			private function removeMenu():void {
				facade.getOperation("removeMenu").send(menu);
			}
			
			private function removeMenu_result(): void{
				menuList();
				clearFieldsByTab();
			}
			
			private function saveMenu_result(event:ResultEvent): void{
				var menuP: Menu = CastEntities.castMenu(event.result);
				if (menuP != null && menuP.menuId != 0){
					menuList();	
					inputMenuLabel.text = "";
					inputMenuName.text = "";
				}
				else{
					var paramError:Array = new Array(true, "Menu registration failure.");
					ModulesController.createModule("modules/System/MessageStatus.swf", this, paramError);
				} 	
			}
			
			private function selectMenu(): void{
				if (dgMenus.selectedItem != null) {
					menu.menuId = dgMenus.selectedItem.menuId;
					menu.name = dgMenus.selectedItem.name;
					menu.label = dgMenus.selectedItem.label;
					inputMenuName.text = menu.name;
					inputMenuLabel.text = menu.label;
					createMenuButton.visible = false;
					updateMenuButton.visible = true;
					removeMenuButton.visible = true;
				}
			}
			
			private function createSystemStage(): void{
				systemStage = new SystemStage();
				updateSystemStage();
			}
			
			private function updateSystemStage():void {
				systemStage.course = StringUtil.trim(inputStageCourse.text);
				systemStage.courseClass = StringUtil.trim(inputStageClass.text);
				systemStage.semester = StringUtil.trim(inputStagePeriod.text);
				if(systemStage.id == 0){
					facade.getOperation("createSystemStage").send(systemStage);
				}else{
					facade.getOperation("updateSystemStage").send(systemStage);
				}
			}
			
			private function deleteSystemStage():void {
				facade.getOperation("deleteSystemStage").send(systemStage);
			}
			
			private function deleteSystemStage_result(): void{
				getSystemStageList();
				clearFieldsByTab();
			}
			
			private function saveSystemStage_result(event:ResultEvent): void{
				var stageP: SystemStage = CastEntities.castStage(event.result);
				if (stageP != null && stageP.id != 0){
					getSystemStageList();	
					inputStageClass.text = "";
					inputStageCourse.text = "";
					inputStagePeriod.text = "";
				}
				else{
					var paramError:Array = new Array(true, "Stage registration failure.");
					ModulesController.createModule("modules/System/MessageStatus.swf", this, paramError);
				} 	
			}
			
			private function selectStage(): void{
				if (dgStages.selectedItem != null) {
					systemStage.id = dgStages.selectedItem.id;
					systemStage.course = dgStages.selectedItem.course;
					systemStage.courseClass = dgStages.selectedItem.courseClass;
					systemStage.semester = dgStages.selectedItem.semester;
					inputStageClass.text = systemStage.courseClass;
					inputStageCourse.text = systemStage.course;
					inputStagePeriod.text = systemStage.semester;
					saveStageButton.visible = false;
					newStageButton.visible = true;
					updateStageButton.visible = true;
					removeStageButton.visible = true;
				}
			}
			
			private function saveFunction(): void{
				func = new MenuFunction();
				updateFunction();
			}
			
			private function updateFunction():void {
				func.name = StringUtil.trim(inputFunctionName.text);
				func.label = StringUtil.trim(inputFunctionLabel.text);
				func.menu = CastEntities.castMenu(cbMenu.selectedItem);
				if(func.functionId == 0){
					facade.getOperation("saveFunction").send(func);
				}
				else{
					facade.getOperation("updateFunction").send(func);
				}
			}
			
			private function removeFunction():void {
				facade.getOperation("removeFunction").send(func);
			}
			
			private function removeFunction_result(): void{
				functionList();
				clearFieldsByTab();
			}
			
			private function filtrateFunctionsByMenu():void {
				try{
					handleValidateFunction(null);
					var menuAux : * = cbMenu.selectedItem;
					facade.getOperation("getFunctionByMenu").send(menuAux.menuId);
				} catch(e: Error){}
				
			}
			
			private function getFunctionByMenu_result(event:ResultEvent): void{
				dgFunctions.dataProvider = new ArrayCollection();
				dgFunctions.dataProvider = event.result as ArrayCollection;
			}
			
			private function saveFunction_result(event:ResultEvent): void{
				var pFunction: MenuFunction = CastEntities.castFunction(event.result);
				if (pFunction != null && pFunction.functionId != 0){
					functionList();	
					inputFunctionName.text = "";
					inputFunctionLabel.text = "";
				}
				else{
					var paramError:Array = new Array(true, "Function registration failure.");
					ModulesController.createModule("modules/System/MessageStatus.swf", this, paramError);
				} 	
			}
			
			private function selectFunction(): void{
				if (dgFunctions.selectedItem != null) {
					func.functionId = dgFunctions.selectedItem.functionId;
					func.name = dgFunctions.selectedItem.name;
					func.label = dgFunctions.selectedItem.label;
					func.menu = CastEntities.castMenu(dgFunctions.selectedItem.menu);
					inputFunctionName.text = func.name;
					inputFunctionLabel.text = func.label;
					cbMenu.selectedIndex = Util.objectTakesPost("menuId", ArrayCollection(cbMenu.dataProvider), func.menu);
					saveFunctionButton.visible = false;
					updateFunctionButton.visible = true;
					removeFunctionButton.visible = true;
					removeFunctionButton.enabled = true;
					updateFunctionButton.enabled = true;
				}
			}
			
			private function saveGroup(): void{
				group = new Group();
				updateGroup();
			}
			
			private function updateGroup():void {
				group.name = StringUtil.trim(inputGroup.text);
				if(group.groupId == 0){
					facade.getOperation("saveGroup").send(group);
				} else{
					facade.getOperation("updateGroup").send(group);
				}
			}
			
			private function removeGroup():void {
				facade.getOperation("removeGroup").send(group);
			}
			
			private function removeGroup_result(): void{
				groupList();
				clearFieldsByTab();
			}
			
			private function saveGroup_result(event:ResultEvent): void{
				var pGroup: Group = CastEntities.castGroup(event.result);
				if (pGroup != null && pGroup.groupId != 0){
					groupList();	
					inputGroup.text = "";
				}
				else{
					var paramError:Array = new Array(true, "Group registration failure.");
					ModulesController.createModule("modules/System/MessageStatus.swf", this, paramError);
				} 	
			}
			
			private function selectGroup(): void{
				if (dgGroups.selectedItem != null) {
					group.groupId = dgGroups.selectedItem.groupId;
					group.name = dgGroups.selectedItem.name;
					inputGroup.text = group.name;
					saveGroupButton.visible = false;
					updateGroupButton.visible = true;
					removeGroupButton.visible = true;
				}
			}
			
			private function saveUserGroup(): void{
				firstEntry = true;
				user = new User();
				userGroup = new UserGroup();
				verifyUser();
			}
			
			private function getUserByLogin_result(event:ResultEvent): void{
				var localMessage:Array = new Array(true, "The Login is duplicated. The update was aborted.");
				launchException(localMessage);
			}
			
			private function ExistingUserFailure(event:FaultEvent):void {
				if(firstEntry){
					if (currentState != "teacherState"){
						if(inputUserPassword.text.length == 0){
							facade.getOperation("generatePassword").send(6,"");		
						}
						else{
							UpdateUser();
						}
					}else{
						if(inputUserPasswordState.text.length == 0){
							facade.getOperation("generatePassword").send(6,"");
						}
						else{
							UpdateUser();
						}
					}
				}
				else{
					UpdateUser();		
				}
			}
			
			private function generatePassword_result(event:ResultEvent): void{
				generatedPassword = event.result as String;
				UpdateUser();
			}
			
			private function verifyUser(): void{
				try{
					if (currentState != "teacherState"){
						if(firstEntry){
							facade.getOperation("getUserByLogin").send(StringUtil.trim(inputUserLogin.text));
						}
						else{
							if(dgUsers.selectedItem.user.login != StringUtil.trim(inputUserLogin.text)){
								facade.getOperation("getUserByLogin").send(StringUtil.trim(inputUserLogin.text));	
							}
							else{
								UpdateUser();		
							}
						}
					}
					else{
						if(firstEntry){
							facade.getOperation("getUserByLogin").send(StringUtil.trim(inputUserLoginState.text));
						}
						else{
							if(dgUsersState.selectedItem.user.login != StringUtil.trim(inputUserLogin.text)){
								facade.getOperation("getUserByLogin").send(StringUtil.trim(inputUserLoginState.text));	
							}
							else{
								UpdateUser();		
							}	
						}
					}
				}catch(e: Error){
					UpdateUser();
				}
			}
			
			private function UpdateUser(): void{
				var localMessage:Array;
				if (currentState != "teacherState"){
					if(inputUserPassword.text.length != 0 && inputUserPassword.text.length < 6){
						localMessage = new Array(true, "Too short password. The Registration was not completed.");
						launchException(localMessage);
					}
					else{
						if(dgUsers.selectedItem != null){
							if(!firstEntry) user.userId = dgUsers.selectedItem.user.userId;
							if(StringUtil.trim(inputUserPassword.text) != ""){
								user.password = StringUtil.trim(inputUserPassword.text);
							}else{
								if(firstEntry) user.password = generatedPassword;
								else user.password = dgUsers.selectedItem.user.password;
							}	
						}else{
							if(firstEntry && inputUserPassword.text.length == 0){
								user.password = generatedPassword;
							}
							else{
								user.password = StringUtil.trim(inputUserPassword.text);
							}	
						}
						user.login = StringUtil.trim(inputUserLogin.text);
						user.name = StringUtil.trim(inputUserName.text);
						user.email = StringUtil.trim(inpuUserEmail.text);
						user.period = CastEntities.castStage(cbSystemStage.selectedItem);
						if(!firstEntry && userGroup.user.email != user.email){
							emailChanged = true;
						}
						userGroup.group = CastEntities.castGroup(cbUserGroup.selectedItem);
						userGroup.user = user;
						facade.getOperation("saveUser").send(userGroup);
					}
				}
				else{
					if(inputUserPasswordState.text.length != 0 && inputUserPasswordState.text.length < 6){
						localMessage = new Array(true, "Too short password. The Registration was not completed.");
						launchException(localMessage);
					}
					else{
						if(dgUsersState.selectedItem != null){
							if(!firstEntry) user.userId = dgUsersState.selectedItem.user.userId;
							if(StringUtil.trim(inputUserPasswordState.text) != ""){
								user.password = StringUtil.trim(inputUserPasswordState.text);
							}else{
								if(firstEntry) user.password = generatedPassword;
								else user.password = dgUsersState.selectedItem.user.password;
							}	
						}else{
							if(firstEntry && inputUserPasswordState.text.length == 0){
								user.password = generatedPassword;
							}
							else{
								user.password = StringUtil.trim(inputUserPasswordState.text);
							}	
						}
						user.login = StringUtil.trim(inputUserLoginState.text);
						user.name = StringUtil.trim(inputUserNameState.text);
						user.email = StringUtil.trim(inputUserEmailState.text);
						user.period = CastEntities.castStage(cbSystemStageState.selectedItem);
						if(!firstEntry && userGroup.user.email != user.email){
							emailChanged = true;
						}
						userGroup.group = CastEntities.castGroup(cbUserGroupState.selectedItem);
						userGroup.user = user;
						facade.getOperation("saveUser").send(userGroup);
					}
				}
			}
			
			private function removeUser():void {
				facade.getOperation("removeUserGroup").send(userGroup);
			}
			
			private function removeUserGroup_result(): void{
				filtrateUserByGroup();
				clearFieldsByTab();
				var mens: Array = new Array(false, "The User was successfuly deleted!");
				launchException(mens);
			}
			
			private function saveUser_result(event:ResultEvent): void{
				var pUserGroup: UserGroup = CastEntities.castUserGroup(event.result);
				if (pUserGroup != null && pUserGroup.userGroupId != 0){
					filtrateUserByGroup();
					if (currentState != "teacherState"){
						inputUserLogin.text = "";
						inputUserName.text = "";
						passwordSaved = inputUserPassword.text;
						inputUserPassword.text = "";
						inpuUserEmail.text = "";
					}
					else{	
						inputUserLoginState.text = "";
						inputUserNameState.text = "";
						passwordSaved = inputUserPasswordState.text;
						inputUserPasswordState.text = "";
						inputUserEmailState.text = "";
					}
				}
				var localMessage:Array;
				if (firstEntry){
					sendEmails(pUserGroup);
					firstEntry = false;
					filtrateUserByGroup();
				}
				else{
					if(emailChanged){
						sendEmails(userGroup);
						emailChanged = false;
					} else{
						localMessage = new Array(false, "The data was sucessfully updated!");
						launchException(localMessage);
					}
				}
			}
			
			private function sendEmails(pUserGroup: UserGroup):void {
				if(passwordSaved == ""){
					passwordSaved = generatedPassword;
				}
				message = "<BR>Congratulations, you were registered in the Easy Lab Correction system from (SUBJECT) .</BR>" +
						"<BR></BR>" +				
						"<BR>We inform you that the programming assignments are going to be submitted </BR>" +
						"<BR>at the system with the following access data:</BR>" +
						"<BR></BR>" +
						"Login:<BR>" + pUserGroup.user.login + "</BR>" + 
						"<BR>Password:</BR><BR>"+ passwordSaved +"</br>" + 
						"<p>Obs.:Please remember! Your password was randomly generated and it unstraferable, " +
						"so we suggest you to update it imediatelly.</p>" + 
						"<BR>Click <a href=http://les.dsc.ufcg.edu.br:8080/EasyLabCorrection/>here</a> to access the system.</BR>" +
						"<BR></BR>" +
						"<BR>Graciously,</BR>" +
						"<BR>Easy Lab Correction Team</BR>";
				
				message = Util.generateHTMLCode(message);
				contact = pUserGroup.user.email;
				userName = pUserGroup.user.name;
				sendEmailService.send();
				
			}
			
			private function selectUser(): void{
				if (currentState != "teacherState"){
					if (dgUsers.selectedItem != null) {
						userGroup.userGroupId = dgUsers.selectedItem.userGroupId;
						userGroup.user = CastEntities.castUser(dgUsers.selectedItem.user);
						userGroup.group = dgUsers.selectedItem.group;
						cbUserGroup.selectedIndex = Util.objectTakesPost("groupId", ArrayCollection(cbUserGroup.dataProvider), userGroup.group);
						cbSystemStage.selectedIndex = Util.objectTakesPost("id", ArrayCollection(cbSystemStage.dataProvider), userGroup.user.period);
						inputUserName.text = userGroup.user.name;
						inputUserLogin.text = userGroup.user.login;
						inpuUserEmail.text = userGroup.user.email;
						saveUserButton.visible = false;
						updateUserButton.visible = true;
						newUserButton.visible = true;
						removeUserButton.visible = true;
					}
				}
				else{
					if (dgUsersState.selectedItem != null) {
						userGroup.userGroupId = dgUsersState.selectedItem.userGroupId;
						userGroup.user = CastEntities.castUser(dgUsersState.selectedItem.user);
						userGroup.group = dgUsersState.selectedItem.group;
						cbUserGroupState.selectedIndex = Util.objectTakesPost("groupId", ArrayCollection(cbUserGroupState.dataProvider), userGroup.group);
						cbSystemStageState.selectedIndex = Util.objectTakesPost("id", ArrayCollection(cbSystemStageState.dataProvider), userGroup.user.period);
						inputUserNameState.text = userGroup.user.name;
						inputUserLoginState.text = userGroup.user.login;
						inputUserEmailState.text = userGroup.user.email;
						saveUserButtonState.visible = false;
						updateUserButtonState.visible = true;
						newUserButtonState.visible = true;
						removeUserButtonState.visible = true;
					}
				}
			}
			
			private function changeSaver(): void {
				clearFieldsByTab();
				
			}
			
			private function clearFieldsByTab():void {
				if (currentState != "teacherState"){
					if (tabNav.selectedIndex == 2){
						clearFieldsMenu();
						createMenuButton.visible = true;
						updateMenuButton.visible = false;
						removeMenuButton.visible = false;
					}
					if (tabNav.selectedIndex == 3){
						clearFieldsFunction();
						saveFunctionButton.visible = true;
						updateFunctionButton.visible = false;
						removeFunctionButton.visible = false;
					}
					if (tabNav.selectedIndex == 1){
						clearFieldsGroup();
						saveGroupButton.visible = true;
						updateGroupButton.visible = false;
						removeGroupButton.visible = false;
					}
					if (tabNav.selectedIndex == 0){
						clearFieldsUser();
						saveUserButton.visible = true;
						updateUserButton.visible = false;
						newUserButton.visible = false;
						removeUserButton.visible = false;
					}
					if (tabNav.selectedIndex == 4){
						clearFieldsStage();
						saveStageButton.visible = true;
						updateStageButton.visible = false;
						newStageButton.visible = false;
						removeStageButton.visible = false;
					}
				}
				else{
					clearFieldsUser();
					saveUserButtonState.visible = true;
					updateUserButtonState.visible = false;
					newUserButtonState.visible = false;
					removeUserButtonState.visible = false;
				}
			}
			
			private function clearFieldsMenu(): void{
				inputMenuLabel.text = "";
				inputMenuName.text = "";	
			}
			
			private function clearFieldsFunction(): void{
				inputFunctionName.text = "";
				inputFunctionLabel.text = "";
				cbMenu.selectedIndex = -1;	
			}
			
			private function clearFieldsGroup(): void{
				inputGroup.text = "";	
			}
			
			private function clearFieldsUser(): void{
				if (currentState != "teacherState"){
					inputUserLogin.text = "";
					inputUserName.text = "";
					inputUserPassword.text = "";
					inpuUserEmail.text = "";
					//cbGrupoUsuario.selectedIndex = -1;
					//dgUsuarios.dataProvider = new ArrayCollection;
				}
				else{
					inputUserLoginState.text = "";
					inputUserNameState.text = "";
					inputUserPasswordState.text = "";
					inputUserEmailState.text = "";
					//scbGrupoUsuarioAlt.selectedIndex = -1;
					//dgUsuariosAlt.dataProvider = new ArrayCollection;
				}
			}
			
			private function clearFieldsStage(): void{
				inputStageCourse.text = "";
				inputStageClass.text = "";
				inputStagePeriod.text = "";	
			}
			
			private function filtrateUserByGroup(): void{
				try{
					handleValidaUsuario(null);
					var auxUserGroup : *;
					if (currentState != "teacherState"){
						auxUserGroup = cbUserGroup.selectedItem;	
					}
					else{
						auxUserGroup = cbUserGroupState.selectedItem;
					}
					facade.getOperation("getUserByGroup").send(auxUserGroup.groupId);
				} catch(e: Error){}
			}
			
			private function getUserByGroup_result(event:ResultEvent): void{
				if (currentState != "teacherState"){
					dgUsers.dataProvider = new ArrayCollection();
					dgUsers.dataProvider = event.result as ArrayCollection;
					if(dgUsers.dataProvider.length > 0){
						dgUsers.selectedIndex = 0;
						selectUser();
					}
					else{
						changeSaver();
					}
				}
				else{
					dgUsersState.dataProvider = new ArrayCollection();
					dgUsersState.dataProvider = event.result as ArrayCollection;
					if(dgUsersState.dataProvider.length > 0){
						dgUsersState.selectedIndex = 0;
						selectUser();
					}
					else{
						changeSaver();
					}
				}
			}
						
			private function handleValidaMenu(eventObj:ValidationResultEvent):void {
				if (StringUtil.trim(inputMenuName.text) != "" && StringUtil.trim(inputMenuLabel.text) != ""){     
               		createMenuButton.enabled = true;
            		updateMenuButton.enabled = true;
            	    removeMenuButton.enabled = true;
        		}
        		else{        
               		createMenuButton.enabled = false;
            		updateMenuButton.enabled = false;
            	    removeMenuButton.enabled = false;
        		}
            }
            
            private function handleValidateStage(eventObj:ValidationResultEvent):void {
				if (StringUtil.trim(inputStageCourse.text) != "" && 
					StringUtil.trim(inputStageClass.text) != "" &&
					StringUtil.trim(inputStagePeriod.text) != ""){     
               		saveStageButton.enabled = true;
            		updateStageButton.enabled = true;
            	    removeStageButton.enabled = true;
        		}
        		else{        
               		saveStageButton.enabled = false;
            		updateStageButton.enabled = false;
            	    removeStageButton.enabled = false;
        		}
            }
            
            private function handleValidateFunction(eventObj:ValidationResultEvent):void {
            	if (StringUtil.trim(inputFunctionName.text) != "" && 
                	StringUtil.trim(inputFunctionLabel.text) != "" &&
                	cbMenu.selectedIndex != -1){
                 	saveFunctionButton.enabled = true;
                	updateFunctionButton.enabled = true;
                	removeFunctionButton.enabled = true;
             	}
             	else{             		
                   	saveFunctionButton.enabled = false;
                	updateFunctionButton.enabled = false;
                	removeFunctionButton.enabled = false;	
             	}
            }
            
            private function handleValidaGrupo(eventObj:ValidationResultEvent):void {
                if (StringUtil.trim(inputGroup.text) != ""){                
                    saveGroupButton.enabled = true;
                 	updateGroupButton.enabled = true;
                 	removeGroupButton.enabled = true;                 	
            	}                    
                else{                
                    saveGroupButton.enabled = false;
                 	updateGroupButton.enabled = false;
                 	removeGroupButton.enabled = false;	
                }   
            }
            
            private function handleValidaUsuario(eventObj:ValidationResultEvent):void {
            	if (currentState != "teacherState"){
	                if (StringUtil.trim(inputUserName.text) != "" && 
	                	StringUtil.trim(inputUserLogin.text) != "" &&
	                	validEmail &&
	                	cbUserGroup.selectedIndex != -1){
	                	saveUserButton.enabled = true;
	                	updateUserButton.enabled = true;
	                	newUserButton.enabled = true;
	                	removeUserButton.enabled = true;                	
	                }
	                else{
	                	saveUserButton.enabled = false;               	
	                }
            	}
            	else{
            		 if (StringUtil.trim(inputUserNameState.text) != "" && 
	                	StringUtil.trim(inputUserLoginState.text) != "" &&
	                	validEmail &&
	                	cbUserGroupState.selectedIndex != -1){
	                	saveUserButtonState.enabled = true;
	                	updateUserButtonState.enabled = true;
	                	newUserButtonState.enabled = true;
	                	removeUserButtonState.enabled = true;                	
	                }
	                else{
	                	saveUserButtonState.enabled = false;              	
	                }
            	}
            }
            
            private function lancaEvento(event:FaultEvent):void {
				var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
					event.fault, event.token, event.message);
				dispatchEvent(e);
			}
			
			private function handleEmail(event:ResultEvent):void {
				var type: String = "";
				if (currentState != "teacherState"){
					type = cbUserGroup.selectedItem.name;
				}else{
					type = cbUserGroupState.selectedItem.name;
				}
				ModulesController.createModule("modules/System/MessageStatus.swf", this,
					[false, type + " successful registration! Email sent."]);
			}
            
            private function removeFail(event:FaultEvent):void{
				var mens:Array = new Array(true, "It was not possible to finish the operation.");
				launchException(mens);
			}
			
			private function invalidateEmail(event:ValidationResultEvent):void {
				validEmail = false;
				if (currentState != "teacherState"){
                	saveUserButton.enabled = false;
                	updateUserButton.enabled = false;
                	newUserButton.enabled = false;
                	removeUserButton.enabled = false;
            	}
            	else{
	                saveUserButtonState.enabled = false;
	                updateUserButtonState.enabled = false;
	                newUserButtonState.enabled = false;
	                removeUserButtonState.enabled = false;	                
            	}
			}
			
			private function validateEmail(event:ValidationResultEvent):void {
				validEmail = true;
				handleValidaUsuario(event);
			}
			
			private function nameCompare(itemA:Object, itemB:Object):int {  
				return ObjectUtil.stringCompare(
					itemA.user.name,  
					itemB.user.name,   
					true
				);
			}
			
			private function loginCompare(itemA:Object, itemB:Object):int {  
				return ObjectUtil.stringCompare(
					itemA.user.login,  
					itemB.user.login,   
					true
				);
			}
			
		]]>
	</mx:Script>
	
	<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
		
		<mx:method name="menuList" result="menuList_result(event)" fault="failure(event)"/>
		<mx:method name="functionList" result="functionList_result(event)" fault="failure(event)"/>
		<mx:method name="groupList" result="groupList_result(event)" fault="failure(event)"/>
		<mx:method name="saveMenu" result="saveMenu_result(event)" fault="failure(event)"/>
		<mx:method name="updateMenu" result="saveMenu_result(event)" fault="failure(event)"/>
		<mx:method name="saveFunction" result="saveFunction_result(event)" fault="failure(event)"/>
		<mx:method name="updateFunction" result="saveFunction_result(event)" fault="failure(event)"/>
		<mx:method name="getFunctionByMenu" result="getFunctionByMenu_result(event)" fault="failure(event)"/>
		<mx:method name="saveGroup" result="saveGroup_result(event)" fault="failure(event)"/>
		<mx:method name="createSystemStage" result="saveSystemStage_result(event)" fault="failure(event)"/>
		<mx:method name="updateSystemStage" result="saveSystemStage_result(event)" fault="failure(event)"/>
		<mx:method name="updateGroup" result="saveGroup_result(event)" fault="failure(event)"/>
		<mx:method name="saveUser" result="saveUser_result(event)" fault="failure(event)"/>
		<mx:method name="getUserByGroup" result="getUserByGroup_result(event)" fault="failure(event)"/>
		<mx:method name="getUserGroupByUser" result="getUserGroupByUser_result(event)" fault="failure(event)"/>
		<mx:method name="getUserByLogin" result="getUserByLogin_result(event)" fault="ExistingUserFailure(event)"/>
		<mx:method name="systemStageList" result="systemStageList_result(event)" fault="failure(event)"/>
		<mx:method name="removeMenu" result="removeMenu_result()" fault="menuFailure(event)"/>
		<mx:method name="removeFunction" result="removeFunction_result()" fault="failure(event)"/>
		<mx:method name="removeGroup" result="removeGroup_result()" fault="groupFailure(event)"/>
		<mx:method name="removeUserGroup" result="removeUserGroup_result()" fault="removeFail(event)"/>
		<mx:method name="deleteSystemStage" result="deleteSystemStage_result()" fault="failure(event)"/>
		<mx:method name="generatePassword" result="generatePassword_result(event)" fault="failure(event)"/>
		
	</mx:RemoteObject>
	
	<mx:HTTPService id="sendEmailService" method="POST" 
    	url="{ExternalInterface.call('getUrlSendMail')}"
    	useProxy="false"
    	resultFormat="text"
    	result="handleEmail(event)"
    	fault="lancaEvento(event)"
    	showBusyCursor="true">
	    <mx:request>
	        <assunto>{subject}</assunto>
	        <contato>{contact}</contato>
	        <mensagem>{message}</mensagem>
	        <nomeUsuario>{userName}</nomeUsuario>
	    </mx:request>
	</mx:HTTPService>
	
	<mx:Validator required="true" id="menuNameValidator" source="{inputMenuName}"
    	property="text" valid="handleValidaMenu(event)" invalid="handleValidaMenu(event)"
    	requiredFieldError="Informe o nome do menu."/>
    	
    <mx:Validator required="true" id="labelMenuValidator" source="{inputMenuLabel}"
    	property="text" valid="handleValidaMenu(event)" invalid="handleValidaMenu(event)"
    	requiredFieldError="Informe o rótulo do menu."/>
    	
    <mx:Validator required="true" id="courseStageValidator" source="{inputStageCourse}"
    	property="text" valid="handleValidateStage(event)" invalid="handleValidateStage(event)"
    	requiredFieldError="Informe a disciplina da turma."/>
    	
    <mx:Validator required="true" id="courseClassStageValidator" source="{inputStageClass}"
    	property="text" valid="handleValidateStage(event)" invalid="handleValidateStage(event)"
    	requiredFieldError="Informe a turma."/>
    	
    <mx:Validator required="true" id="periodStageValidator" source="{inputStagePeriod}"
    	property="text" valid="handleValidateStage(event)" invalid="handleValidateStage(event)"
    	requiredFieldError="Informe a periodo da turma."/>
    	
    <mx:Validator required="true" id="functionNameValidator" source="{inputFunctionName}"
    	property="text" valid="handleValidateFunction(event)" invalid="handleValidateFunction(event)"
    	requiredFieldError="Informe o nome da função."/>
    	
    <mx:Validator required="true" id="labelFunctionValidator" source="{inputFunctionLabel}"
    	property="text" valid="handleValidateFunction(event)" invalid="handleValidateFunction(event)"
    	requiredFieldError="Informe o rótulo da função."/>
    	
    <mx:Validator required="true" id="menuFunctionValidtator" source="{cbMenu}"
    	property="text" valid="handleValidateFunction(event)" invalid="handleValidateFunction(event)"
    	requiredFieldError="Informe o menu da função."/>
    	
    <mx:Validator required="true" id="groupValidator" source="{inputGroup}"
    	property="text" valid="handleValidaGrupo(event)" invalid="handleValidaGrupo(event)"
    	requiredFieldError="Informe o nome de grupo."/>
    	
    <mx:Validator required="true" id="loginUserValidator" source="{inputUserLogin}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe o login do usuário."/>
    	
    <mx:Validator required="true" id="systemStageValidator" source="{cbSystemStage}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe a turma do usuário."/>
    	
    <mx:Validator required="true" id="userNameValidator" source="{inputUserName}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe o nome do usuário."/>
    	
    <mx:Validator required="true" id="userEmailValidator" source="{inpuUserEmail}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe o email do usuário."/>
    	
    <mx:Validator required="true" id="userGroupValidator" source="{cbUserGroup}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe o grupo do usuário."/>
    
    <mx:EmailValidator id="emailValidator" invalid="invalidateEmail(event)" valid="validateEmail(event)"
		source="{inpuUserEmail}" property="text" trigger="{inpuUserEmail}" 
		triggerEvent="change"
		invalidCharError="Seu endereço de email contém caracteres inválidos."
	    invalidDomainError= "O dominio de seu endereço de email está formatado incorretamente." 
	    invalidIPDomainError="The endereço IP do dominio de seu email está formatado incorretamente." 
	    invalidPeriodsInDomainError="O domínio do seu endereço de email possui pontos consecutivos." 
	    missingAtSignError="Um caracter @ está faltando no seu endereço de email."
	    missingPeriodInDomainError="Está faltando um ponto (.) no seu endereço de email." 
	    missingUsernameError="O nome de usuário está faltando no seu endereço de email." 
	    tooManyAtSignsError="Seu endereço de email contém muitos caracteres @."
	/>
	
	<mx:TabNavigator change="selectTab()" width="100%" height="100%" id = "tabNav" visible="true">	
		
		<mx:Canvas label="User" width="100%" height="100%" id="canvas4">
			<mx:ComboBox prompt="select..." x="64" y="10" width="548" labelField="name" id="cbUserGroup" toolTip="{toolTipUserGroup}" change="filtrateUserByGroup()"/>
			<mx:ComboBox prompt="select..." x="62" y="39.5" width="550" labelFunction="showStage" id="cbSystemStage" toolTip="{toolTipSystemStage}"/>
			<mx:TextInput x="64" y="69" width="548" id="inputUserName" toolTip="{toolTipUserName}" change="handleValidaUsuario(null)"/>
			<mx:TextInput x="64" y="98.5" width="252.5" id="inputUserLogin" toolTip="{toolTipUserLogin}" change="handleValidaUsuario(null)"/>
			<mx:TextInput x="404.5" y="98.5" width="207.5" id="inputUserPassword" displayAsPassword="true"/>
			<mx:TextInput x="64" y="128.5" width="548" id="inpuUserEmail" toolTip="{toolTipUserEmail}" change="handleValidaUsuario(null)"/>
			<mx:Button x="243.5" y="160.5" label="   Save" click="saveUserGroup()" icon="@Embed(source='../../image/disquete.png')" width="135" id="saveUserButton" height="28" enabled="false"/>
			<mx:Button x="100.5" y="160.5" label="   New" width="135" height="28" id="newUserButton" click="changeSaver()" icon="@Embed(source='../../image/novo.png')"/>
			<mx:Button x="386.5" y="160.5" label="   Delete" click="removeUser()" icon="@Embed(source='../../image/delete.png')" width="135" id="removeUserButton" height="28"/>
			<mx:Button x="243.5" y="160.5" label="   Update" click="verifyUser()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="updateUserButton" height="28"/>
			<mx:Label x="9" y="11.5" text="Group:" id="labelGrupoUsuario"/>
			<mx:Label x="12" y="41" text="Class:" id="labelClass"/>
			<mx:Label x="10" y="71" text="Name:" id="labelNomeUsuario"/>
			<mx:Label x="12" y="100.5" text="Login:" id="labelLoginUsuario"/>
			<mx:Label x="12" y="130.5" text="Email:" id="labelEmailUsuario"/>
			<mx:Label x="327.5" y="100.5" text="Password:" id="labelSenhaUsuario"/>
			<mx:DataGrid x="10" y="196.5" width="602" height="190.5" draggableColumns="false" change="selectUser()" itemClick="selectUser()"
					 labelFunction="labelGridUsers" id="dgUsers">
				<mx:columns>
					<mx:DataGridColumn headerText="Login" width="200" sortCompareFunction="loginCompare"/>
					<mx:DataGridColumn headerText="Name" sortCompareFunction="nameCompare"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas label="Group" width="100%" height="100%" id="canvas3">
			<mx:TextInput x="74" y="45" width="538" id="inputGroup" toolTip="{toolTipGroupName}" change="handleValidaGrupo(null)"/>
			<mx:Label x="18" y="45.5" text="Group:" id="labelGrupo"/>
			<mx:Button x="243.5" y="90" label="   Register" icon="@Embed(source='../../image/disquete.png')" width="135" click="saveGroup()" id="saveGroupButton" height="28" enabled="false"/>
			<mx:Button x="548" y="23" label="New" width="63" id="botaoNovoGrupo" height="23" click="changeSaver()"/>
			<mx:Button x="315" y="90" label="   Delete" click="removeGroup()" icon="@Embed(source='../../image/delete.png')" width="135" id="removeGroupButton" height="28" visible="false" enabled="false"/>
			<mx:Button x="172" y="90" label="   Update" click="updateGroup()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="updateGroupButton" height="28" visible="false" enabled="false"/>
			<mx:DataGrid x="10" y="141" width="602" height="246" change="selectGroup()" itemClick="selectGroup()"
					draggableColumns="false" labelFunction="labelGridGroups" id="dgGroups">
				<mx:columns>
					<mx:DataGridColumn headerText="Grupo"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas label="Menu" width="100%" height="100%" id="canvas1">		
			<mx:TextInput x="64" y="45" width="548" id="inputMenuName" toolTip="{toolTipMenuName}" change="handleValidaMenu(null)"/>
			<mx:TextInput x="64" y="73" width="548" id="inputMenuLabel" toolTip="{toolTipLabelMenu}" change="handleValidaMenu(null)"/>
			<mx:Button x="243.5" y="111" label="   Cadastrar" icon="@Embed(source='../../image/disquete.png')" click="saveMenu()" width="135" id="createMenuButton" height="28" enabled="false"/>
			<mx:Button x="548" y="23" label="New" width="63" click="changeSaver()" id="botaoNovoMenu" height="23"/>
			<mx:Label x="10" y="47" text="Name:" id="labelMenuCourse"/>
			<mx:Label x="10" y="75" text="Label:" id="labelMenuClass"/>
			<mx:Button x="315" y="111" label="   Delete" click="removeMenu()" icon="@Embed(source='../../image/delete.png')" width="135" id="removeMenuButton" height="28" visible="false" enabled="false"/>
			<mx:Button x="172" y="111" label="   Update" click="updateMenu()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="updateMenuButton" height="28" enabled="false" visible="false"/>
			<mx:DataGrid x="10" y="155" width="602" change="selectMenu()" itemClick="selectMenu()" 
					height="232" labelFunction="labelGridMenus" draggableColumns="false" id="dgMenus">
				<mx:columns>
					<mx:DataGridColumn headerText="Label" width="100"/>
					<mx:DataGridColumn headerText="Name"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas label="Function" width="100%" height="100%" id="canvas2">
			<comp:ComboBoxAC labelField="name" x="62" y="15.5" width="550" id="cbMenu" toolTip="{toolTipMenuFunction}" change="filtrateFunctionsByMenu()"/>
			<mx:TextInput x="62" y="76" width="550" id="inputFunctionName" toolTip="{toolTipNameFunction}" change="handleValidateFunction(null)"/>
			<mx:TextInput x="62" y="104" width="550" id="inputFunctionLabel" toolTip="{toolTipNameFunction}" change="handleValidateFunction(null)"/>
			<mx:Button x="243.5" y="144" label="   Register" icon="@Embed(source='../../image/disquete.png')" width="135" 
				id="saveFunctionButton" click="saveFunction()" height="28" enabled="false"/>
			<mx:Button x="548" y="54" label="New" width="63" id="botaoNovaFuncao" height="23" click="changeSaver()"/>
			<mx:Button x="315" y="143" label="   Delete" click="removeFunction()" icon="@Embed(source='../../image/delete.png')" width="135" id="removeFunctionButton" height="28" visible="false" enabled="false"/>
			<mx:Button x="172" y="143" label="   Update" click="updateFunction()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="updateFunctionButton" height="28" visible="false" enabled="false"/>
			<mx:Label x="10" y="16.5" text="Menu:" id="labelCbMenu"/>
			<mx:Label x="10" y="78" text="Name:" id="labelNomeFuncao"/>
			<mx:Label x="10" y="106" text="Label:" id="labelRotuloFuncao"/>
			<mx:DataGrid x="10" y="189" width="602" height="198" change="selectFunction()" itemClick="selectFunction()"
					draggableColumns="false" labelFunction="labelGridFunctions" id="dgFunctions">
				<mx:columns>
					<mx:DataGridColumn headerText="Label" width="100"/>
					<mx:DataGridColumn headerText="Name"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas label="Stage" width="100%" height="100%" id="canvas5">		
			<mx:TextInput x="90" y="32" width="522" maxChars="50" id="inputStageCourse" toolTip="{toolTipStageCourse}" change="handleValidateStage(null)"/>
			<mx:TextInput x="377" y="64" width="235" maxChars="50" id="inputStageClass" toolTip="{toolTipStageClass}" change="handleValidateStage(null)"/>
			<mx:TextInput x="90" y="62" width="215" maxChars="50" id="inputStagePeriod" toolTip="{toolTipStagePeriod}" change="handleValidateStage(null)"/>
			<mx:Button x="243.5" y="107" label="   Register" icon="@Embed(source='../../image/disquete.png')" click="createSystemStage()" width="135" id="saveStageButton" height="28" enabled="false"/>
			<mx:Button x="548" y="10" label="New" width="63" click="changeSaver()" id="newStageButton" height="23"/>
			<mx:Label x="10" y="64" text="Semester:" id="labelStagePeriod" width="72" textAlign="left"/>
			<mx:Label x="10" y="34" text="Course:" id="labelStageCourse" width="56" textAlign="right"/>
			<mx:Label x="313" y="66" text="Class:" id="labelStageClass" width="56" textAlign="right"/>
			<mx:Button x="315" y="107" label="   Delete" click="deleteSystemStage()" icon="@Embed(source='../../image/delete.png')" width="135" id="removeStageButton" height="28" visible="false" enabled="false"/>
			<mx:Button x="172" y="107" label="   Update" click="updateSystemStage()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="updateStageButton" height="28" enabled="false" visible="false"/>
			<mx:DataGrid x="10" y="143" width="602" change="selectStage()" itemClick="selectStage()" 
					height="244" labelFunction="labelGridStages" draggableColumns="false" id="dgStages">
				<mx:columns>
					<mx:DataGridColumn headerText="Course" width="400"/>
					<mx:DataGridColumn headerText="Semester"/>
					<mx:DataGridColumn headerText="Class"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
	</mx:TabNavigator>
</les:ModuleTitleWindow>
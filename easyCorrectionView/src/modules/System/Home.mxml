<?xml version="1.0" encoding="utf-8"?>
<mx:TabNavigator xmlns:mx="http://www.adobe.com/2006/mxml" width="938" height="627"
		borderThickness="0" borderStyle="none" xmlns:comp="com.adobe.flex.extras.controls.*" creationComplete="init()" alpha="1.0" backgroundColor="#E3E6EB" borderColor="#CBCECE" backgroundAlpha="0.4">
	
	<mx:Script>
		<![CDATA[
			import bean.Utility.*;
			import bean.assessments.Assessment;
			import bean.team.TeamHasUserHasAssignment;
			import bean.assignments.Assignment;
			import Scripts.ModulesController;
			import events.ObjectEvent;
			import com.flexspy.imp.Utils;
			import mx.binding.utils.BindingUtils;
			import mx.effects.Rotate;
			import mx.controls.Image;
			import mx.controls.Alert;
			import flash.net.navigateToURL;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			
			private var userId:int;
			private var gU:Object = new Object();
			private var userGroups:ArrayCollection = new ArrayCollection();
			private const FILE_UPLOAD_URL:String = Constant.urlUploadDonwload;
			private var fileRef:FileReference = new FileReference();
			private var request:URLRequest = new URLRequest(ExternalInterface.call('downLoadRoteiro'));
			private var interfaceFileName: String = "";
			private var testsFileName: String = "";
			
			[Bindable]
			private var assignment: Assignment = new Assignment();
			
			private function init():void {
				facade.channelSet = ModulesController.createChannel("easyCorrection", ExternalInterface.call('getCanalSeguro'));
				ModulesController.getParam();
				this.systemManager.addEventListener(ObjectEvent.ObjetoEventConst, hasAssignment);
				getUserGroupByUser();
				downloadTestsButton.enabled = false;
				downloadInterfaceButton.enabled = false;
				checkCorrectionButton.enabled = false;
				getReleasedAssignments();
			}
			
			private function getUserGroupByUser():void{
				userId = SharedObject.getLocal("sistema", "/").data.idUsuario;
			}
			
			private function hasAssignment(event: ObjectEvent):void{
				getReleasedAssignments();
			}
			
			private function failure(event:FaultEvent):void {
				var message:String;
				try{
					if (event.fault.rootCause.message == null) {
						message = event.fault.faultString;
					} else {
						message = event.fault.rootCause.message;
					} 
				}
				catch(e:Error){
					message = "Serviço indisponível, reinicie a operação.";
				}
				ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
			}
			
			private function getReleasedAssignments():void{
				facade.getOperation("getReleasedAssignments").send();
			}
			
			private function getReleasedAssignments_result(event:ResultEvent):void{
				assignmentList.dataProvider = event.result as ArrayCollection;
				if ((assignmentList.dataProvider as ArrayCollection).length == 0){
					downloadTestsButton.enabled = false;
					downloadInterfaceButton.enabled = false;
					buttonVisualizarNotas.enabled = false;
					checkCorrectionButton.enabled = false;
				}
			}
			
			private function updateAssignmentData(): void{
				try{
					assignment = CastEntities.castAssignment(assignmentList.selectedItem);
					inputAssignmentTitle.text = assignment.name;
					resumeText.text = assignment.description;
					inputMaxNumberSends.text = String(assignment.sendMaxNumber);
					inputMembersByTeam.text = String(assignment.participantsMaxNumber);
					inputPenalty.text = String(assignment.penaltyPerDaysLate);
					inputDiscussionDate.text = Util.formatsDate(assignment.discussionDate);
					inputDeliveryDate.text = Util.formatsDate(assignment.deliveryDate);
					inputReleaseDate.text = Util.formatsDate(assignment.releaseDate);
					inputDiscussionTime.text = Util.unitOrganizesTime(String(assignment.discussionDate.hours)) + ":" + 
						Util.unitOrganizesTime(String(assignment.discussionDate.minutes));
					inputDeliveryTime.text = Util.unitOrganizesTime(String(assignment.deliveryDate.hours)) + ":" + 
						Util.unitOrganizesTime(String(assignment.deliveryDate.minutes));
					inputReleaseTime.text = Util.unitOrganizesTime(String(assignment.releaseDate.hours)) + ":" + 
						Util.unitOrganizesTime(String(assignment.releaseDate.minutes));
					
					loadFiles();
					facade.getOperation("getTeamHasUserHasAssignmentByUserAndAssignment").send(userId, assignment.id);
				}
				catch(e: Error){}
			}
			
			private function getTeamHasUserHasAssignmentByUserAndAssignment_result(event:ResultEvent):void{
				var tua: TeamHasUserHasAssignment = new TeamHasUserHasAssignment();
				tua = CastEntities.castTeamHasUserHasAssignment(event.result);
				if(tua != null){
					facade.getOperation("getTeamHasUserHasAssignmentByTeamAndAssignment").send(tua.team.id, tua.assignment.id);
				}
			}
			
			private function getTeamHasUserHasAssignmentByTeamAndAssignment_result(event:ResultEvent):void{
				var tuaList: ArrayCollection = event.result as ArrayCollection;
				teamAssignmentMembers.dataProvider = new ArrayCollection();
				var userId: int = SharedObject.getLocal("sistema", "/").data.idUsuario;
				if(tuaList.length > 0){
					teamAssignmentMembers.dataProvider = tuaList;
				}
				for (var i: int = 0; i < tuaList.length; i++){
					var tua: TeamHasUserHasAssignment = CastEntities.castTeamHasUserHasAssignment(tuaList.getItemAt(i));
					if (tua.user.userId == userId){
						facade.getOperation("getAssessmentsByTeamAndAssignment").send(tua.team.id, tua.assignment.id);
						break;
					}
				}
			}
			
			private function getAssessmentsByTeamAndAssignment_result(event:ResultEvent):void{
				var assessmentsList: ArrayCollection = event.result as ArrayCollection;
				try{
					var assessment: Assessment = CastEntities.castAssessment(assessmentsList.getItemAt(0));
					inputAutomaticGrade.text = Util.formatsValue(String(assessment.automaticGrade));
					inputCorrectionGrade.text = Util.formatsValue(String(assessment.correctionGrade));
				} catch(e: Error){
					inputAutomaticGrade.text = "0,0";
					inputCorrectionGrade.text = "0,0";
				}
			}
			
			private function loadFiles(): void{
				loadInterface();
			}
			
			private function checkGrades(): void{
				ModulesController.createModule("modules/Views/VisualizacaoDeNotas.swf", this, "");
			}
			
			private function checkCorrection(): void{
				ModulesController.createModule("modules/Views/ModuloCorrecao.swf", this, "");
			}
			
			private function loadInterface(): void{
				try{
					facade.getOperation("getInterfaceFileName").send(assignment);
				}
				catch(e: Error){
					var message:String = "Selecione Um Roteiro.";
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
				}
			}
			
			private function labelTeamAssignmentMembers(item:*):String {
				return item.user.name;
			}
			
			private function getInterfaceFileName_result(event:ResultEvent):void{
				interfaceFileName = String(event.result);
				facade.getOperation("getTestsFileName").send(assignment);
			}
			
			private function getTestsFileName_result(event:ResultEvent):void{
				testsFileName = String(event.result);
				downloadTestsButton.enabled = true;
				downloadInterfaceButton.enabled = true;
			}
			
			private function downloadInterface(): void{
				try{
					var variables:URLVariables = new URLVariables();
					variables.fileMame = assignment.interfaceDirectory + interfaceFileName;
					request.data = variables;
					fileRef.download(request, interfaceFileName);		
				}
				catch(e: Error){
					var message:String = "Selecione Um Roteiro.";
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
				}
			}
			
			private function downloadTests(): void{
				try{
					var variables:URLVariables = new URLVariables();
					variables.fileName = assignment.testsDirectory + testsFileName;
					request.data = variables;
					fileRef.download(request, testsFileName);
				}
				catch(e: Error){
					var message:String = "Selecione Um Roteiro.";
					ModulesController.createModule("modules/System/MessageStatus.swf", this, new Array(true, message));
				}
			}
		]]>
	</mx:Script>	
	
	<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">		
		<mx:method name="getReleasedAssignments" result="getReleasedAssignments_result(event)" fault="failure(event)"/>
		<mx:method name="getInterfaceFileName" result="getInterfaceFileName_result(event)" fault="failure(event)"/>
		<mx:method name="getTestsFileName" result="getTestsFileName_result(event)" fault="failure(event)"/>
		<mx:method name="getTeamHasUserHasAssignmentByUserAndAssignment" result="getTeamHasUserHasAssignmentByUserAndAssignment_result(event)" fault="failure(event)"/>
		<mx:method name="getTeamHasUserHasAssignmentByTeamAndAssignment" result="getTeamHasUserHasAssignmentByTeamAndAssignment_result(event)" fault="failure(event)"/>
		<mx:method name="getAssessmentsByTeamAndAssignment" result="getAssessmentsByTeamAndAssignment_result(event)" fault="failure(event)"/>
	</mx:RemoteObject>
		
	<mx:Canvas label="Roteiros" id="assignmentCanvas">
	
		<mx:Label x="331" y="12" text="Detalhes do Roteiro" fontWeight="bold" fontStyle="normal" fontSize="14"/>
		<mx:Label x="14" y="552" text="Total de Projetos Inscritos:" id="labelTotalProjetosInscritos" visible="false"/>
		<mx:Label x="198" y="552" width="85" id="totalProjetosInscritos" visible="false"/>
		<mx:Label x="10" y="461" text="Equipe:"/>
		<mx:LinkButton x="454.8" y="520" id="downloadInterfaceButton" icon="@Embed(source='../../image/entradaDeProduto.png')" label="   Baixar Interface" click="downloadInterface()"/>
		<mx:LinkButton x="636.8" y="520" id="downloadTestsButton" icon="@Embed(source='../../image/entradaDeProduto.png')" label="   Baixar Testes" click="downloadTests()"/>
		<mx:LinkButton x="435.8" y="551" id="checkCorrectionButton" icon="@Embed(source='../../image/relatorio.png')" label="   Visualizar Correção" click="checkCorrection()"/>
		<mx:LinkButton x="636.8" y="551" id="buttonVisualizarNotas" icon="@Embed(source='../../image/relatorio.png')" label="   Visualizar Planilha de Notas" click="checkGrades()"/>
		<mx:LinkButton x="626" y="10" visible="false" icon="@Embed(source='../../image/help2.png')" label="  Instruções para Avaliação dos Projetos" id="linkInstrucao"/>
		<mx:Button x="546.05" y="565" visible="false" label="   Atualizar Projeto" width="183.9" height="28" icon="@Embed(source='../../image/lapis.png')" id="botaoAtualizaOrientador"/>
		<mx:Button x="546.05" y="565" visible="false" label="   Avaliar" width="183.9" height="28" icon="@Embed(source='../../image/lapis.png')" id="botaoAvaliacao"/>
		<mx:List x="10" y="70" visible="false" fontSize="12" width="315" height="95" cornerRadius="20" alpha="0.5" id="projetoAvaliacaoList"/>
		<mx:List x="10" y="404" visible="false" fontSize="12" width="315" height="137" cornerRadius="20" alpha="0.5" id="projetoList"/>
		<mx:List x="10" y="202" visible="false" fontSize="12" width="315" height="155" cornerRadius="20" alpha="0.5" id="projetoCotaList"/>
		<mx:Label x="331" y="96" text="Descrição:" id="labelDescRoteiro"/>
		<mx:Label x="333" y="70" text="Título:" id="labelDescRoteiro0"/>
		<mx:Label x="745" y="38" text="Nota do Corretor:"/>
		<mx:Label y="10" text="Nota Automática:" x="748"/>
		<mx:Label x="588" y="423" text="Data de Liberação:"/>
		<mx:Label x="588" y="450" text="Data de Entrega:"/>
		<mx:Label x="588" y="478" text="Data Final para Discussão:"/>
		<mx:Label x="331" y="422" text="Número máximo de envios:"/>
		<mx:Label x="331" y="450" text="Máximo de Integrantes por Equipe:"/>
		<mx:Label x="331" y="478" text="Penalidade por dia de atraso:"/>
		<mx:Label x="10" y="46" text="Projetos para Avaliação:" fontStyle="normal" fontWeight="bold" fontSize="14" id="projetoAvaliacaoLabel" visible="false"/>
		<mx:Label x="10" y="378" text="Meus Projetos:" fontStyle="normal" fontWeight="bold" fontSize="14" id="meusProjetosLabel" visible="false"/>
		<mx:Label x="10" y="176" text="Projetos da Cota Atual:" fontStyle="normal" fontWeight="bold" fontSize="14" id="projetosCotaLabel" visible="false"/>
		<mx:VRule x="302" y="13" height="577"  width="1"/>
		<mx:Label x="557" y="478" width="16" id="inputPenalty" color="#1B7A0F" text="0" textAlign="right"/>
		<mx:Label x="557" y="450" width="16" id="inputMembersByTeam" color="#1B7A0F" text="0" textAlign="right"/>
		<mx:Label x="557" y="422" width="16" id="inputMaxNumberSends" color="#1B7A0F" text="0" textAlign="right"/>
		<mx:Label x="769" y="422" width="93" id="inputReleaseDate" color="#1B7A0F"/>
		<mx:Label x="769" y="450" width="93" id="inputDeliveryDate" color="#1B7A0F"/>
		<mx:Label x="769" y="478" width="93" id="inputDiscussionDate" color="#1B7A0F"/>
		<mx:Label x="864" y="422" width="54" id="inputReleaseTime" color="#1B7A0F"/>
		<mx:Label x="864" y="450" width="54" id="inputDeliveryTime" color="#1B7A0F"/>
		<mx:Label x="864" y="478" width="54" id="inputDiscussionTime" color="#1B7A0F"/>
		<mx:TextArea x="331" y="124" width="587" height="279" backgroundAlpha="0.0" id="resumeText" editable="false" alpha="0.5" cornerRadius="10"/>
		<mx:Label x="10" y="14" text="Roteiros:" height="22"/>
		<mx:Label x="10" y="14" text="Roteiros:" height="22"/>
		<mx:List x="10" y="44" scroll="true" width="264" height="399" id="assignmentList" labelField="nome" itemClick="updateAssignmentData()" fontSize="14"/>
		<mx:List x="10" y="489" width="267" height="85" labelFunction="labelTeamAssignmentMembers" id="teamAssignmentMembers"></mx:List>
		<mx:Label x="386" y="70" width="532" id="inputAssignmentTitle" color="#1B7A0F" text="..."/>
		<mx:Label x="870" y="38" width="48" id="inputCorrectionGrade" color="#1B7A0F" text="0,0"/>
		<mx:Label x="870" y="10" width="48" id="inputAutomaticGrade" color="#1B7A0F" text="0,0"/>
	</mx:Canvas>
</mx:TabNavigator>
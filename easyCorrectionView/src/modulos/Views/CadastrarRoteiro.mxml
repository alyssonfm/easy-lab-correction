<?xml version="1.0" encoding="utf-8"?>
<!--
	Componente para a tela de login do sistema
-->

<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modulos.sistema.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="800" height="592" creationComplete="init()" title="Cadastro de Roteiro" showCloseButton="true" close="fechaJanela()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import bean.Utilitarios.Constantes;
				import eventos.ObjetoEvent;
				import bean.Utilitarios.Util;
				import mx.skins.halo.NumericStepperUpSkin;
				import bean.roteiros.Roteiro;
				import mx.collections.ArrayCollection;
				import bean.Utilitarios.CastDeEntidades;
				import eventos.UsuarioEvent;
				import bean.acesso.*;
				import bean.sistema.*;
				import eventos.RespostaLoginEvent;
				import eventos.FechaPopupEvent;
				import mx.utils.Base64Decoder;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ControladorDeModulos;
				import mx.binding.utils.BindingUtils;
				//import eventos.RespostaLoginEvent;
				//import eventos.FechaPopupEvent;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
				
				private static const millisecondsPerDay : int = 1000 * 60 * 60 * 24;
				
				private var fileRefTestes:FileReference;
				private var requestTestes: URLRequest;
				private var fileRefInterface:FileReference;
				private var requestInterface: URLRequest;
				private const FILE_UPLOAD_URL:String = Constantes.urlUploadDonwload;
				
				public static var editado: Boolean = false;
				public static var cadastrado: Boolean = false; 
				
				private var periodo:Periodo = new Periodo();
				private var roteiro:Roteiro = new Roteiro();
//				private var bloqueado:Boolean = false;
				private var estado:*;
				private var fezUpload: Boolean = false;
				private var ehCadastro: Boolean = false;
				private var urlTestes: String = "";
				private var urlInterface: String = "";
				private var paramMensagem:Array;
	            
	            private function falha(event:FaultEvent):void {
					var mensagem:String;
					try{
						if (event.fault.rootCause.message == null) {
							mensagem = event.fault.faultString;
						} else {
							mensagem = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						mensagem = "Serviço indisponível, reinicie a operação.";
					}
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, new Array(true, mensagem));
				}
				
				private function fechaJanela():void {
					dispatchEvent(new ObjetoEvent(""));
					dispatchEvent(new FechaPopupEvent(this));
				}
				
				/*
				 *	Caso aconteça algum erro no acesso ao controlador, através do HttpService
				 *	então devemos mostra uma mensagem de erro
				 */
				private function lancaEvento(event:FaultEvent):void {
					var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
						event.fault, event.token, event.message);
					dispatchEvent(e);
				}
				
				private function init():void {
					
					facade.channelSet = ControladorDeModulos.criaCanal();
					estado = ControladorDeModulos.getParam();
					dfDataMaxima.selectedDate = new Date(new Date().getTime()+(7*millisecondsPerDay));
					dfDataDiscussao.selectedDate = new Date(new Date().getTime()+(21*millisecondsPerDay));
					getPeriodoAtual();
					if(estado != null){
						pegaRoteiro();
						botaoAtualizarRoteiro.visible = true;
						botaoCadastrarRoteiro.visible = false;
					}else{
						botaoAtualizarRoteiro.visible = false;
						botaoCadastrarRoteiro.visible = true;
//						estadoAtual.text = "Roteiro BLOQUEADO"
					}
				}
				
				private function pegaRoteiro():void{
					roteiro = new Roteiro();
					roteiro = CastDeEntidades.castRoteiro(estado);
					inputDescricao.text = roteiro.descricao;
//					if(roteiro.bloqueado){
//						estadoAtual.text = "Roteiro BLOQUEADO"
//						estadoAtual.color = "#F4381F"
//					}else{
//						estadoAtual.text = "Roteiro LIBERADO"
//						estadoAtual.color = "#0D890D"						
//					}
					dfDataDiscussao.selectedDate = dfDataDiscussao as Date;
					dfDataDiscussao.text = Util.formataData(roteiro.dataFinalDiscussao);
					var horarioLimite: Date = roteiro.dataFinalEntrega as Date;
					inputHora.text = String(horarioLimite.getHours());
					inputMinuto.text = String(horarioLimite.getMinutes());
					dfDataMaxima.selectedDate = horarioLimite;
					dfDataMaxima.text = Util.formataData(roteiro.dataFinalEntrega);
					dfDataLiberacao.selectedDate = roteiro.dataLiberacao as Date;
					dfDataLiberacao.text = Util.formataData(roteiro.dataLiberacao);
					inputDescricao.text = roteiro.descricao;
					caminhoInterface.text = roteiro.diretorioInterface;
					caminhoTestes.text = roteiro.diretorioTestes;
					inputTitulo.text = roteiro.nome;
					inputNumeroMaxEnvios.text = String(roteiro.numeroMaximoEnvios);
					inputMaximoEquipe.text = String(roteiro.numeroMaximoParticipantes);
					inputPenalidade.text = String(roteiro.penalidadeDiasAtraso);
					inputPorcentagem.text = String(roteiro.porcentagemTestesAutomaticos);
					inputTempoLimite.text = String(roteiro.tempoLimiteTestes);
				}
				
				private function escolheArquivoTestes(): void{
					fileRefTestes = new FileReference();
			   	 	fileRefTestes.addEventListener(Event.SELECT, arquivoSelecionadoTestes);
			   	 	fileRefTestes.addEventListener(Event.COMPLETE, envioCompletoTestes);
			   	 	fileRefTestes.addEventListener(IOErrorEvent.IO_ERROR, erroEnvioTestes);
			    	fileRefTestes.browse(new Array(new FileFilter("Testes (*.zip)","*.zip")));
				}
				
				public function erroEnvioTestes(evt:Event):void {
			       	var param:Array = new Array(true, "Ocorreu um erro de transmissão. O arquivo(s) de teste não foi(foram) enviado(s)." +
														"\n\nTente novamente! Caso este erro persista..." + 
														"\n\nVerifique se sua conexão com a internet está ativada.");
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, param);
				}
				
				public function arquivoSelecionadoTestes(evt:Event):void {
			       	requestTestes = new URLRequest(FILE_UPLOAD_URL);
			       	caminhoTestes.text = fileRefTestes.name;
				}
				
				public function envioCompletoTestes(evt:Event):void {
					requestTestes = new URLRequest(FILE_UPLOAD_URL);
					var variables:URLVariables = new URLVariables();
					variables.url = urlInterface;
					variables.nomeArquivo = caminhoInterface.text;
					requestInterface.data = variables;
					fileRefInterface.upload(requestInterface);
				}
				
				public function cadastraRoteiro(): void{
					dispatchEvent(new FechaPopupEvent(this));
				}
				
				private function escolheArquivoInterface(): void{
					fileRefInterface = new FileReference();
			   	 	fileRefInterface.addEventListener(Event.SELECT, arquivoSelecionadoInterface);
			   	 	fileRefInterface.addEventListener(Event.COMPLETE, envioCompletoInterface);
			   	 	fileRefInterface.addEventListener(IOErrorEvent.IO_ERROR, erroEnvioInterface);
			    	fileRefInterface.browse(new Array(new FileFilter("Interface (*.java)","*.java")));
				}
				
				public function erroEnvioInterface(evt:Event):void {
			       	var param:Array = new Array(true, "Ocorreu um erro de transmissão. O arquivo de Interface não foi enviado." +
														"\n\nTente novamente! Caso este erro persista..." + 
														"\n\nVerifique se sua conexão com a internet está ativada.");
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, param);
				}
				
				public function arquivoSelecionadoInterface(evt:Event):void {
			       	requestInterface = new URLRequest(FILE_UPLOAD_URL);
			       	caminhoInterface.text = fileRefInterface.name;
				}
				
				public function envioCompletoInterface(evt:Event):void {
				}
				
				private function getPeriodoAtual():void{
					facade.getOperation("getPeriodoAtual").send();
				}
				
				private function getPeriodoAtual_result(event:ResultEvent):void{
					periodo = new Periodo();
					periodo = CastDeEntidades.castPeriodo(ArrayCollection(event.result).getItemAt(0));
				}
				
				private function preencheRoteiro():void{
					//roteiro.bloqueado = bloqueado;
					roteiro.dataFinalDiscussao= Util.formataDataStringEmDate(dfDataDiscussao.text);
					var dataLimiteEntrega: Date = Util.formataDataStringEmDate(dfDataMaxima.text);
					dataLimiteEntrega.setHours(Number(inputHora.text), Number(inputMinuto.text),0,0);						
					roteiro.dataFinalEntrega = dataLimiteEntrega; 
					roteiro.dataLiberacao = Util.formataDataStringEmDate(dfDataLiberacao.text);
					roteiro.descricao = inputDescricao.text;
					roteiro.nome = inputTitulo.text;
					roteiro.diretorioInterface = "/periodo" + periodo.semestre + "/interface/" + roteiro.id + "/";
					roteiro.diretorioTestes = "/periodo" + periodo.semestre + "/testes/" + roteiro.id + "/";
					roteiro.numeroMaximoEnvios = int(inputNumeroMaxEnvios.text);
					roteiro.numeroMaximoParticipantes = int(inputMaximoEquipe.text);
					roteiro.penalidadeDiasAtraso = Util.formataTextValorToNumber(inputPenalidade.text);
					roteiro.periodo = periodo;
					roteiro.porcentagemTestesAutomaticos = Util.formataTextValorToNumber(inputPorcentagem.text);
					roteiro.tempoLimiteTestes = int(inputTempoLimite.text);
					
				}
				
				private function checaHora(): Boolean{
					try{
						if( Number(inputHora.text) > 23 ||
							Number(inputMinuto.text) > 59){
							return false;
						}
					}catch(e: Error){
						return false;
					}
					return true;
				}
				
				private function editarRoteiro():void{
					if(roteiro.id != 0){
						if (checaHora()){
							preencheRoteiro();
							ehCadastro = false;
							facade.getOperation("editarRoteiro").send(CastDeEntidades.castRoteiro(roteiro));
						}
						else{
							var param:Array = new Array(true, "Horário limite para entrega inválido. (Intervalo: 00:00 ~ 23:59)");
							ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, param);
						}	
					}					
				}
				
				private function cadastrarRoteiro():void{
					var horaValida: Boolean = checaHora();
					if (checaHora()){
						roteiro = new Roteiro();
						preencheRoteiro();
						ehCadastro = true;
						facade.getOperation("cadastrarRoteiro").send(CastDeEntidades.castRoteiro(roteiro));
					}
					else{
						var param:Array = new Array(true, "Horário limite para entrega inválido. (Intervalo: 00:00 ~ 23:59)");
						ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, param);
					}
				}
				
				private function cadastrarRoteiro_result(event:ResultEvent):void{
					roteiro = new Roteiro();
					roteiro = CastDeEntidades.castRoteiro(event.result);
					urlTestes = "/periodo" + periodo.semestre + "/testes/" + roteiro.id + "/";
					urlInterface = "/periodo" + periodo.semestre + "/interface/" + roteiro.id + "/";
					if (!ehCadastro){
						try{
							var variables:URLVariables = new URLVariables();
							variables.url = urlTestes;
							variables.nomeArquivo = "testes.zip";
							requestTestes.data = variables;
							fileRefTestes.upload(requestTestes);
						}catch(e: Error){}
						if(!fezUpload){
							editado = true;
							fechaJanela();
						} 
					}
					else{
						fezUpload = true;
						editarRoteiro();
						cadastrado = true;
						fechaJanela();
					}
				}
				
//				private function bloqueiaRoteiro():void{
//					if(botaoBloquear.label == "Bloquear"){
//						bloqueado = true;
//						botaoBloquear.label = "Desbloquear";
//					}else if(botaoBloquear.label == "Desbloquear"){
//						bloqueado = false;
//						botaoBloquear.label = "Bloquear";
//						
//					}
//				}
				
				private function atualizaDatasDefaut():void{
					var dataAux: String = dfDataLiberacao.text;
					dfDataMaxima.selectedDate = new Date(dfDataLiberacao.selectedDate.getTime()+(7*millisecondsPerDay));
					dfDataDiscussao.selectedDate = new Date(dfDataLiberacao.selectedDate.getTime()+(21*millisecondsPerDay));
				}
				
			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="getPeriodoAtual" result="getPeriodoAtual_result(event)" fault="falha(event)"/>
			<mx:method name="cadastrarRoteiro" result="cadastrarRoteiro_result(event)" fault="falha(event)"/>
			<mx:method name="editarRoteiro" result="cadastrarRoteiro_result(event)" fault="falha(event)"/>
		</mx:RemoteObject>
		
		<mx:Label text="Título:" fontWeight="bold"
			textAlign="left" width="54" x="10" y="10" id="labelTitulo"/>
		<mx:Label text="Porcentagem Automática da Avaliação:" fontWeight="bold"
			textAlign="left" width="270" x="10" y="330"/>
		<mx:Label text="%" fontWeight="bold"
			textAlign="left" width="20" x="384" y="330"/>
		<mx:Label text="Descrição:" fontWeight="bold"
			textAlign="left" width="79" x="10" y="50" id="labelDescricao"/>
		<mx:TextInput x="62" y="8" id="inputTitulo" width="438" maxChars="250"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"		
		toolTip="" x="641" y="10" width="129" id="dfDataLiberacao" text="{df.format(new Date())}" change="atualizaDatasDefaut()"/>
		<mx:DateFormatter id="df" formatString="DD/MM/YYYY"/>
		<mx:TextArea x="10" y="78" width="760" height="122" id="inputDescricao" maxChars="30000"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"
		toolTip="" x="236" y="223" width="129" id="dfDataMaxima"/>
		<mx:TextInput x="675" y="221" id="inputHora" width="35" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:TextInput x="730" y="221" id="inputMinuto" width="40" restrict="[0-9]" maxChars="2" text="00"/>
		<mx:DateField  yearNavigationEnabled="true" showToday="true" restrict="{['0-9']}"
		formatString="DD/MM/YYYY" dayNames="['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']"
		monthNames="['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']"
		toolTip="" x="236" y="253" width="129" id="dfDataDiscussao"/>
		<mx:TextInput x="675" y="253" id="inputMaximoEquipe" width="95" restrict="[0-9]" maxChars="2" text="1"/>
		<mx:TextInput x="236" y="283" id="inputNumeroMaxEnvios" width="113" restrict="[0-9]" maxChars="2" text="3"/>
		<extra:DecimalInput x="675" y="283"  precision="2" restrict="'0-9'" useThousandsSeparator="true" currencyFormat="br" enabled="true" id="inputPenalidade" width="95" text="0.5"/>
		<extra:DecimalInput x="285" y="328"   precision="2" restrict="'0-9'" useThousandsSeparator="true" currencyFormat="br" enabled="true" id="inputPorcentagem" width="91" text="100"/>
		<mx:TextInput x="641" y="330" id="inputTempoLimite" width="95" restrict="[0-9]" maxChars="2" text="10"/>
		<mx:Label text="Máximo de integrantes por equipe:" fontWeight="bold"
			textAlign="left" width="239" x="407" y="255" id="labelAutomatica0"/>
		<mx:Label text="Penalidade por dia de atraso:" fontWeight="bold"
			textAlign="left" width="201" x="407" y="285"/>
		<mx:Label text="Número máximo de envios:" fontWeight="bold"
			textAlign="left" width="191" x="10" y="285" id="labelAutomatica3"/>
		<mx:Label text="Horário limite para entrega (hh:mm):" fontWeight="bold"
			textAlign="left" width="260" x="407" y="223" id="labelHorario"/>
		<mx:Label text="Time-limit dos teste por método:" fontWeight="bold"
			textAlign="left" width="224" x="415" y="332" id="labelAutomatica5"/>
		<mx:Label text="ms" fontWeight="bold"
			textAlign="left" width="27" x="744" y="332" id="labelAutomatica6"/>
		<mx:Label text=":" fontWeight="bold"
			textAlign="left" width="17" x="718" y="223" id="labelAutomatica8"/>
		<mx:Label text="Data Máxima para entrega:" fontWeight="bold"
			textAlign="left" width="201" x="10" y="225" id="labelAutomatica1"/>
		<mx:Label text="Data Máxima para discussão:" fontWeight="bold"
			textAlign="left" width="218" x="10" y="255" id="labelAutomatica2"/>
		<mx:Label text="Data da liberação:" fontWeight="bold"
			textAlign="left" width="131" x="508" y="12" id="labelAutomatica4"/>
		<mx:HRule x="10" y="364" width="760"/>
		<mx:HRule x="10" y="208" width="760"/>
		<mx:HRule x="10" y="317" width="760"/>
		<mx:HRule x="10" y="40" width="760"/>
		<mx:LinkButton x="263.55" y="374" label="   Anexar Testes Automáticos" icon="@Embed(source='../../image/estonar.png')" width="252.9" height="28" id="anexarTestes" click="escolheArquivoTestes()"/>
		<mx:Label x="10" y="406" width="760" id="caminhoTestes" textAlign="center"/>
		<mx:LinkButton x="273.05" y="438" label="   Anexar Interface" width="233.9" icon="@Embed(source='../../image/estonar.png')" height="28" id="anexarInterface" click="escolheArquivoInterface()"/>
		<mx:Label x="10" y="470" width="760" id="caminhoInterface" textAlign="center"/>
		<mx:Button x="298.05" y="510" label="Atualizar Roteiro" width="183.9" icon="@Embed(source='../../image/atualiza.png')" height="28" id="botaoAtualizarRoteiro" click="editarRoteiro()"/>
		<mx:Button x="298.05" y="510" label="   Cadastrar Roteiro" width="183.9" icon="@Embed(source='../../image/disquete.png')" height="28" id="botaoCadastrarRoteiro" click="cadastrarRoteiro()"/>
		
		
		
</les:ModuleTitleWindow>

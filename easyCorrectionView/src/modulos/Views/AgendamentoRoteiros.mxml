<?xml version="1.0" encoding="utf-8"?>
<!--
	Componente para a tela de login do sistema
-->

<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modulos.sistema.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="800" height="538" creationComplete="init()" title="Agendamento de Roteiros" showCloseButton="true" close="fechaJanela()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import eventos.ObjetoEvent;
				import mx.managers.SystemManager;
				import bean.Utilitarios.Util;
				import mx.collections.ArrayCollection;
				import eventos.UsuarioEvent;
				import bean.acesso.*;
				import eventos.RespostaLoginEvent;
				import eventos.FechaPopupEvent;
				import mx.utils.Base64Decoder;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ControladorDeModulos;
				import mx.binding.utils.BindingUtils;
				//import eventos.RespostaLoginEvent;
				//import eventos.FechaPopupEvent;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
	            
	            private function falha(event:FaultEvent):void {
					var mensagem:String;
					try{
						if (event.fault.rootCause.message == null) {
							mensagem = event.fault.faultString;
						} else {
							mensagem = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						mensagem = "Serviço indisponível, reinicie a operação.";
					}
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, new Array(true, mensagem));
				}
				
				private function fechaJanela():void {
					dispatchEvent(new ObjetoEvent(null));
					dispatchEvent(new FechaPopupEvent(this));
				}
				
				/*
				 *	Caso aconteça algum erro no acesso ao controlador, através do HttpService
				 *	então devemos mostra uma mensagem de erro
				 */
				private function lancaEvento(event:FaultEvent):void {
					var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
						event.fault, event.token, event.message);
					dispatchEvent(e);
				}
				
				private function init():void {
					
					facade.channelSet = ControladorDeModulos.criaCanal();
					var estado: String = String(ControladorDeModulos.getParam());
					systemManager.addEventListener(ObjetoEvent.ObjetoEventConst, atualizaLista);
					listarRoteiros();
					
				}
				
				private function atualizaLista(event:ObjetoEvent):void{
					listarRoteiros();
				}
				
				private function salvarAgendamento():void{
					dispatchEvent(new FechaPopupEvent(this));
				}
				
				private function listarRoteiros():void{
					facade.getOperation("listarRoteiros").send();
				}
				
				private function listarRoteiros_result(event:ResultEvent):void{
					dg_agenda.dataProvider = new ArrayCollection();
					dg_agenda.dataProvider = event.result;
					var paramMensagem: Array = new Array();
					if(CadastrarRoteiro.editado){
						paramMensagem = new Array(false, "Roteiro Atualizado com sucesso.");
						ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, paramMensagem);
						CadastrarRoteiro.editado = false;
					}
					else if(CadastrarRoteiro.cadastrado){
						paramMensagem = new Array(false, "Roteiro Cadastrado com sucesso.");
						ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, paramMensagem);
						CadastrarRoteiro.cadastrado = false;	
					}
				}
				
				private function labelGrid(item:*, column:DataGridColumn):String {
					var sLabel:String = "";
					var sHeaderText:String = column.headerText;
					switch (sHeaderText)  {
						case "Roteiro":
							sLabel = item.nome;
							break;
						case "Data da Liberação":
							sLabel = Util.formataData(item.dataLiberacao);
							break;
						case "Hor. da Liberação":
							sLabel = Util.organizaUnidadeTempo(String(item.dataLiberacao.getHours())) + ":" + 
								Util.organizaUnidadeTempo(String(item.dataLiberacao.getMinutes()));
							break;
						case "Data da Entrega":
							sLabel = Util.formataData(item.dataFinalEntrega);
							break;
						case "Hor. da Entrega":
							sLabel = Util.organizaUnidadeTempo(String(item.dataFinalEntrega.getHours())) + ":" + 
								Util.organizaUnidadeTempo(String(item.dataFinalEntrega.getMinutes()));
							break;
						case "Status":
							break;
						/*
							if(item.bloqueado == false){
								sLabel = "LIBERADO";
							} else{
								sLabel = "BLOQUEADO";
							}*/
					}
					return sLabel;
				}
				
				private function chamaEditarRoteiro():void{
					if(dg_agenda.selectedItem != null){
						var param:* = dg_agenda.selectedItem;
						ControladorDeModulos.criaModulo("modulos/Views/CadastrarRoteiro.swf", this, param);
					}else{
						ControladorDeModulos.criaModulo("modulos/Views/CadastrarRoteiro.swf", this, null);
					}
				}
				
				private function criaRoteiro():void{
					ControladorDeModulos.criaModulo("modulos/Views/CadastrarRoteiro.swf", this, null);
				}

			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="listarRoteiros" result="listarRoteiros_result(event)" fault="falha(event)"/>
		</mx:RemoteObject>
		<mx:Button x="298.05" y="10" click="criaRoteiro()" label="   Novo Roteiro" width="183.9" icon="@Embed(source='../../image/novo.png')" height="28" id="botaoNovoRoteiro" cornerRadius="20"/>
		<mx:DataGrid x="10" y="46" width="760" height="438" id="dg_agenda" labelFunction="labelGrid" itemClick="chamaEditarRoteiro()">
			<mx:columns>
				<mx:DataGridColumn headerText="Roteiro" width="80"/>
				<mx:DataGridColumn headerText="Data da Liberação" width="50"/>
				<mx:DataGridColumn headerText="Hor. da Liberação" width="50"/>
				<mx:DataGridColumn headerText="Data da Entrega" width="50"/>
				<mx:DataGridColumn headerText="Hor. da Entrega" width="50"/>
				<mx:DataGridColumn headerText="Status" width="50"/>
			</mx:columns>
		</mx:DataGrid>
		
		
</les:ModuleTitleWindow>

<?xml version="1.0" encoding="utf-8"?>
<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modulos.sistema.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="800" height="538" creationComplete="init()" title="Notas" showCloseButton="true" close="fechaJanela()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import mx.utils.ObjectUtil;
				import bean.avaliacoes.Avaliacao;
				import bean.Utilitarios.CastDeEntidades;
				import bean.roteiros.Roteiro;
				import mx.collections.ArrayCollection;
				import eventos.UsuarioEvent;
				import bean.acesso.*;
				import eventos.RespostaLoginEvent;
				import eventos.FechaPopupEvent;
				import mx.controls.Image;
				import com.adobe.serialization.json.JSON;
				import mx.controls.Alert;
				import mx.utils.StringUtil;
				import Scripts.ControladorDeModulos;
				import mx.binding.utils.BindingUtils;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
				
				private function init():void {
					facade.channelSet = ControladorDeModulos.criaCanal();
					var estado: String = String(ControladorDeModulos.getParam());
					listarRoteiros();
				}
				
				private function listarRoteiros():void{
					facade.getOperation("listarRoteiros").send();
				}
				
				private function listarRoteiros_result(event:ResultEvent):void{
					comboRoteiros.dataProvider = new ArrayCollection();
					comboRoteiros.selectedIndex = -1;
					comboRoteiros.dataProvider = event.result;
				}
				
				private function pegaAvaliacoesPorRoteiro():void{
					var rot: Roteiro = CastDeEntidades.castRoteiro(comboRoteiros.selectedItem);
					facade.getOperation("getAvaliacoesPorRoteiro").send(rot);
				}
				
				private function getAvaliacoesPorRoteiro_result(event:ResultEvent):void{
					dgNotas.dataProvider = new ArrayCollection();
					dgNotas.dataProvider = event.result as ArrayCollection;
				}
	            
	            private function falha(event:FaultEvent):void {
					var mensagem:String;
					try{
						if (event.fault.rootCause.message == null) {
							mensagem = event.fault.faultString;
						} else {
							mensagem = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						mensagem = "Serviço indisponível, reinicie a operação.";
					}
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, new Array(true, mensagem));
				}
				
				private function fechaJanela():void {
					dispatchEvent(new FechaPopupEvent(this));
				}
				
				private function labelGrid(item:*, column:DataGridColumn):String {
					var sLabel:String = "";
					var sHeaderText:String = column.headerText;
					switch (sHeaderText)  {
						case "Matrícula":
							sLabel = item.submissao.equipeHasUsuarioHasRoteiro.usuario.login;
							break;
						case "Nome do aluno":
							sLabel = item.submissao.equipeHasUsuarioHasRoteiro.usuario.nome;
							break;
						case "Porcentagem (Testes Automáticos)":
							sLabel = item.submissao.equipeHasUsuarioHasRoteiro.roteiro.porcentagemTestesAutomaticos;
							break;
						case "Nota1 (Testes Automáticos)":
							sLabel = item.notaAutomatica;
							break;
						case "Nota2 (Corretor)":
							sLabel = item.notaCorrecao;
							break;
						case "Nota":
							sLabel = (item.notaAutomatica + item.notaCorrecao); 
							break;
					}
					return sLabel;
				}
				
				private function compareNome(itemA:Object, itemB:Object):int {  
					return ObjectUtil.stringCompare(
						itemA.submissao.equipeHasUsuarioHasRoteiro.usuario.nome,  
						itemB.submissao.equipeHasUsuarioHasRoteiro.usuario.nome,   
						true
					);
				}
				
				private function compareLogin(itemA:Object, itemB:Object):int {  
					return ObjectUtil.stringCompare(
						itemA.submissao.equipeHasUsuarioHasRoteiro.usuario.login,  
						itemB.submissao.equipeHasUsuarioHasRoteiro.usuario.login,   
						true
					);
				}
				
			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="listarRoteiros" result="listarRoteiros_result(event)" fault="falha(event)"/>
			<mx:method name="getAvaliacoesPorRoteiro" result="getAvaliacoesPorRoteiro_result(event)" fault="falha(event)"/>
		</mx:RemoteObject>
		
		<mx:ComboBox x="73" y="10" width="697" id="comboRoteiros" change="pegaAvaliacoesPorRoteiro()" enter="pegaAvaliacoesPorRoteiro()" labelField="nome"></mx:ComboBox>
		<mx:HRule x="10" y="40" width="760" height="10"/>
		<mx:DataGrid x="10" y="58" width="760" height="426" wordWrap="true" id="dgNotas" labelFunction="labelGrid">
			<mx:columns>
				<mx:DataGridColumn headerText="Matrícula" width="50" sortCompareFunction="compareLogin"/>
				<mx:DataGridColumn headerText="Nome do aluno"  width="150" sortable="true" sortCompareFunction="compareNome"/>
				<mx:DataGridColumn headerText="Porcentagem (Testes Automáticos)" width="50"/>
				<mx:DataGridColumn headerText="Nota1 (Testes Automáticos)"  width="50"/>
				<mx:DataGridColumn headerText="Nota2 (Corretor)" width="50"/>
				<mx:DataGridColumn headerText="Nota" width="50"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:Label x="10" y="11.5" width="65" id="caminho0" textAlign="left" text="Roteiro:" fontWeight="bold"/>
					
</les:ModuleTitleWindow>

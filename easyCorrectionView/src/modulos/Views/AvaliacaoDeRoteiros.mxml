<?xml version="1.0" encoding="utf-8"?>

<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modulos.sistema.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	width="800" height="450" creationComplete="init()" title="Avaliação de Roteiros" showCloseButton="true" close="fechaJanela()" layout="absolute">
		
		<mx:Script>
			<![CDATA[
				import bean.roteiros.Submissao;
				import bean.roteiros.EquipeHasUsuarioHasRoteiro;
				import bean.Utilitarios.CastDeEntidades;
				import bean.roteiros.Roteiro;
				import mx.collections.ArrayCollection;
				import mx.utils.ArrayUtil;
				import eventos.FechaPopupEvent;
				import mx.utils.StringUtil;
				import Scripts.ControladorDeModulos;
				import mx.binding.utils.BindingUtils;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
				
				
				private var fileRef:FileReference = new FileReference();
				private var request:URLRequest = new URLRequest(ExternalInterface.call('downLoadRoteiro'));
				private var nomeArquivoCodigo: String = "";
				
				private var eur:EquipeHasUsuarioHasRoteiro = new EquipeHasUsuarioHasRoteiro();
				private var sub:Submissao = new Submissao();
					            
	            private function falha(event:FaultEvent):void {
					var mensagem:String;
					try{
						if (event.fault.rootCause.message == null) {
							mensagem = event.fault.faultString;
						} else {
							mensagem = event.fault.rootCause.message;
						}
					}
					catch(e:Error){
						mensagem = "Serviço indisponível, reinicie a operação.";
					}
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, new Array(true, mensagem));
				}
				
				private function fechaJanela():void {
					dispatchEvent(new FechaPopupEvent(this));
				}
				
				/*
				 *	Caso aconteça algum erro no acesso ao controlador, através do HttpService
				 *	então devemos mostra uma mensagem de erro
				 */
				private function lancaEvento(event:FaultEvent):void {
					var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
						event.fault, event.token, event.message);
					dispatchEvent(e);
				}
				
				private function init():void {
					
					facade.channelSet = ControladorDeModulos.criaCanal();
					var estado: String = String(ControladorDeModulos.getParam());
					var roteiros: ArrayCollection = new ArrayCollection();
					listarRoteiros();
				}
				
				private function listarRoteiros():void{
					facade.getOperation("listarRoteiros").send();
				}
				
				private function listarRoteiros_result(event:ResultEvent):void{
					comboRoteiros.dataProvider = new ArrayCollection();
					comboRoteiros.selectedIndex = -1;
					comboRoteiros.dataProvider = event.result;
					
				}				
				
				private function pegaEquipesPorRoteiro():void{
					var rot: Roteiro = CastDeEntidades.castRoteiro(comboRoteiros.selectedItem);
					inputPeso.text = String(100 - rot.porcentagemTestesAutomaticos) + "%";
					facade.getOperation("getEquipeHasUsuarioHasRoteiroPorRoteiroAgrupadoPorEquipe").send(rot.id);
				}
				
				private function getEquipeHasUsuarioHasRoteiroPorRoteiroAgrupadoPorEquipe_result(event:ResultEvent):void{
					listaEquipes.dataProvider = new ArrayCollection(); 
					listaEquipes.dataProvider = event.result;
				}
				
				private function selecaoLabelEquipes(item: *): String{
					return item.equipe.nome;
				}
				
				private function selecionaEquipe():void{
					eur = CastDeEntidades.castEquipeHasUsuarioHasRoteiro(listaEquipes.selectedItem);
					facade.getOperation("getEquipeHasUsuarioHasRoteiroPorEquipeERoteiro").send(eur.equipe.id, eur.roteiro.id);
				}
				
				private function getEquipeHasUsuarioHasRoteiroPorEquipeERoteiro_result(event:ResultEvent):void{
					listaIntegrantes.dataProvider = new ArrayCollection(); 
					listaIntegrantes.dataProvider = event.result;
					facade.getOperation("getUltimaSubmissaoPorRoteiroEquipe").send(eur.roteiro, eur.equipe);
				}
				
				private function getUltimaSubmissaoPorRoteiroEquipe_result(event:ResultEvent):void{
					sub = CastDeEntidades.castSubmissao(event.result);
					baixarImplementacao.enabled = true;
				}		
								
				private function selecaoLabelIntegrantes(item: *): String{
					return item.usuario.nome;
				}
				
				private function baixarCodigo():void{
					facade.getOperation("getNomeArquivoCodigo").send(sub);
				}
				
				private function getNomeArquivoCodigo_result(event:ResultEvent):void{
					nomeArquivoCodigo = String(event.result);
					try{
						var variables:URLVariables = new URLVariables();
						variables.nomeArquivo = sub.url + nomeArquivoCodigo;
						request.data = variables;
						fileRef.download(request, nomeArquivoCodigo);		
					}
					catch(e: Error){
						var mensagem:String = "Selecione Uma Equipe.";
						ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, new Array(true, mensagem));
					}
				}
				
				private function salvarNotaCorretor():void{
					//Proximos Passos
					//Pegar Uma Avaliação dada uma submissão
					//Setar a nota do Corretor na Avaliação
					//Salvar Avaliação
				}
				
			]]>
		</mx:Script>
				
		<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
			<mx:method name="listarRoteiros" result="listarRoteiros_result(event)" fault="falha(event)"/>
			<mx:method name="getEquipeHasUsuarioHasRoteiroPorEquipeERoteiro" result="getEquipeHasUsuarioHasRoteiroPorEquipeERoteiro_result(event)" fault="falha(event)"/>
			<mx:method name="getEquipeHasUsuarioHasRoteiroPorRoteiroAgrupadoPorEquipe" result="getEquipeHasUsuarioHasRoteiroPorRoteiroAgrupadoPorEquipe_result(event)" fault="falha(event)"/>
			<mx:method name="getUltimaSubmissaoPorRoteiroEquipe" result="getUltimaSubmissaoPorRoteiroEquipe_result(event)" fault="falha(event)"/>
			<mx:method name="getNomeArquivoCodigo" result="getNomeArquivoCodigo_result(event)" fault="falha(event)"/>			
		</mx:RemoteObject>
		
		<mx:Label text="Roteiro:" fontWeight="bold"
			textAlign="left" width="64" x="10" y="22" id="labelRoteiro"/>
		<mx:Label text="Equipes:" fontWeight="bold"
			textAlign="left" width="72" x="10" y="72" id="labelGrupos"/>
		<mx:Label text="Integrantes: " fontWeight="bold"
			textAlign="left" width="93.04999" x="265.95" y="72" id="labelIntegrantes" height="20"/>
		<comp:ComboBoxAC labelField="nome" x="72" y="21" width="698" id="comboRoteiros" change="pegaEquipesPorRoteiro()"/>
		<mx:HRule x="10" y="62" width="760" height="2"/>
		<mx:HRule x="251" y="234" width="518" height="2"/>
		<mx:List id="listaEquipes" x="10" y="94" width="226" height="302" labelFunction="selecaoLabelEquipes" itemClick="selecionaEquipe()"/>
		<mx:List id="listaIntegrantes" x="265.95" y="94" width="504.05" height="66" labelFunction="selecaoLabelIntegrantes"/>
		<mx:VRule x="244" y="62" height="334" width="13.95"/>
		<mx:Button x="398" y="179" label="Baixar Implementação" click="baixarCodigo()" width="239" height="33" fontSize="16" fontStyle="italic" fontWeight="normal" id="baixarImplementacao" enabled="false"/>
		<mx:Button x="398" y="329" label="Salvar Nota" click="salvarNotaCorretor()" width="239" height="33" fontSize="16" fontStyle="italic" fontWeight="normal"/>
		<mx:Label text="Nota:" fontWeight="bold"
			textAlign="left" width="58" x="398" y="275" id="labelNota" fontSize="16"/>
		<mx:Label text="Peso:" fontWeight="bold"
			textAlign="left" width="49" x="541" y="278" id="labelPeso"/>
		<mx:Label fontWeight="bold" textAlign="left" width="49" x="588" y="278" id="inputPeso" height="23"/>
		<mx:TextInput x="457.05" y="273" width="55.95" id="inputNota" fontSize="16"/>
		
		
</les:ModuleTitleWindow>

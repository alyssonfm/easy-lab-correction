<?xml version="1.0" encoding="utf-8"?>
<les:ModuleTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:les="modulos.sistema.*" 
						xmlns:comp="com.adobe.flex.extras.controls.*"
						xmlns:extra="br.com.thinklab.util.control.*"
	layout="absolute" width="644" height="446" title="Cadastros" creationComplete="init()" showCloseButton="true" close="fechaJanela()">
	<les:states>
		<mx:State name="estadoProfessor">
			<mx:RemoveChild target="{tabNav}"/>
			<mx:AddChild position="lastChild">
				<mx:ComboBox prompt="selecione..." x="66" y="10" width="548" labelField="nome" id="cbGrupoUsuarioAlt" toolTip="{toolTipGrupoUsuario}" change="filtrarUsuarioPorGrupo()"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="65" y="41" width="548" id="inputNomeUsuarioAlt" toolTip="{toolTipNomeUsuario}" change="handleValidaUsuario(null)"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="65" y="70.5" width="348" id="inputLoginUsuarioAlt" toolTip="{toolTipLoginUsuario}" change="handleValidaUsuario(null)"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="479" y="70.5" width="134" id="inputSenhaUsuarioAlt" displayAsPassword="true"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="244.5" y="132.5" label="   Salvar" click="cadastrarGrupoUsuario()" icon="@Embed(source='../../image/disquete.png')" width="135" id="botaoCadastrarUsuarioAlt" height="28" enabled="false"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="101.5" y="132.5" label="   Novo" width="135" height="28" id="botaoNovoUsuarioAlt" click="mudaCadastrar()" icon="@Embed(source='../../image/novo.png')"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="387.5" y="132.5" label="   Remover" click="excluirUsuario()" icon="@Embed(source='../../image/delete.png')" width="135" id="botaoRemoverUsuarioAlt" height="28"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="244.5" y="132.5" label="   Atualizar" click="verificaUsuario()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="botaoAtualizarUsuarioAlt" height="28"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="12" y="11.5" text="Grupo:" id="labelGrupoUsuarioAlt"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="11" y="43" text="Nome:" id="labelNomeUsuarioAlt"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="13" y="72.5" text="Login:" id="labelLoginUsuarioAlt"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="65" y="100.5" width="548" id="inputEmailUsuarioAlt" toolTip="{toolTipEmailUsuario}" change="handleValidaUsuario(null)"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="13" y="102.5" text="Email:" id="labelEmailUsuarioAlt"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="421" y="72.5" text="Senha:" id="labelSenhaUsuarioAlt"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:DataGrid x="11" y="168.5" width="602" height="223.5" draggableColumns="false" change="selecionarUsuario()" itemClick="selecionarUsuario()"
						 labelFunction="labelGridUsuarios" id="dgUsuariosAlt">
					<mx:columns>
						<mx:DataGridColumn headerText="Login" dataField="id" width="200"/>
						<mx:DataGridColumn headerText="Usuário"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
		</mx:State>
	</les:states>
	
	<mx:Script>
		<![CDATA[
			import bean.acesso.*;
			import bean.Utilitarios.Util;
			import mx.utils.StringUtil;
			import mx.events.ValidationResultEvent;
			import bean.Utilitarios.CastDeEntidades;
			import mx.rpc.events.FaultEvent;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.validators.EmailValidator;
			import eventos.FechaPopupEvent;
			import Scripts.ControladorDeModulos;
			
			[Bindable]
			private var toolTipNomeMenu:String = 
				"(Obrigatório) Informe o nome do menu.";
			
			[Bindable]
			private var toolTipRotuloMenu:String = 
				"(Obrigatório) Informe um rótulo para o menu.";
				
			[Bindable]
			private var toolTipMenuFuncao:String = 
				"(Obrigatório) Informe o menu da função.";
			
			[Bindable]
			private var toolTipNomeFuncao:String = 
				"(Obrigatório) Informe o nome para a função.";
				
			[Bindable]
			private var toolTipRotuloFuncao:String = 
				"(Obrigatório) Informe uma rótulo para a função.";
				
			[Bindable]
			private var toolTipNomeGrupo:String = 
				"(Obrigatório) Informe um nome para Grupo.";
				
			[Bindable]
			private var toolTipNomeUsuario:String = 
				"(Obrigatório) Informe um nome para o Usuário.";
			
			[Bindable]
			private var toolTipLoginUsuario:String = 
				"(Obrigatório) Informe um login para o Usuário.";
				
			[Bindable]
			private var toolTipSenhaUsuario:String = 
				"(Obrigatório) Informe uma senha para o Usuário.";
			
			[Bindable]
			private var toolTipEmailUsuario:String = 
				"(Obrigatório) Informe um email para o Usuário.";
				
				
			[Bindable]
			private var toolTipGrupoUsuario:String = 
				"(Obrigatório) Informe um grupo para o Usuário.";
			
			
			private var menus: ArrayCollection = new ArrayCollection();
			private var grupos: ArrayCollection = new ArrayCollection();
			
			private var menu: Menu = new Menu();
			private var funcao: Funcao = new Funcao();
			private var grupo: Grupo = new Grupo();
			private var usuario: Usuario = new Usuario();
			private var grupoUsuario: GrupoUsuario = new GrupoUsuario();
			private var usuarioLogado: *;
			private var emailValido: Boolean;
			private var primeiroCadastro: Boolean = false;
			private var monitorLogado: Boolean = false;
			private var senhaCadastrada: String = "";
			private var senhaGerada: String = "";
			
			[Bindable]
			private var mensagem:String;
			
			[Bindable]
			private var contato:String;
			
			[Bindable]
			private var nomeUsuario:String;
			
			[Bindable]
			private var assunto: String = "[LEDA]Cadastro no Easy Lab Correction";			
			
			
			
			private function init():void {
				facade.channelSet = ControladorDeModulos.criaCanal();
				usuarioLogado = ControladorDeModulos.getParam();
				getGrupoUsuario();
			}
			
			private function getGrupoUsuario(): void{
				facade.getOperation("getGrupoUsuarioPorUsuario").send(usuarioLogado.idUsuario);
			}
			
			private function getGrupoUsuarioPorUsuario_result(event:ResultEvent):void {
				var listaGrupoUsuarios: * = event.result as ArrayCollection;
				if (listaGrupoUsuarios.getItemAt(0).grupo.nome.toUpperCase() == "PROFESSOR"
					|| listaGrupoUsuarios.getItemAt(0).grupo.nome.toUpperCase() == "MONITOR"){
					if(listaGrupoUsuarios.getItemAt(0).grupo.nome.toUpperCase() == "MONITOR") monitorLogado = true;
					currentState = "estadoProfessor";
					tabNav.visible = true;
					emailValidator.source = inputEmailUsuarioAlt;
					emailValidator.trigger = inputEmailUsuarioAlt;
					listarGrupos();
				}
				else{
					tabNav.visible = true;
					selecionaAba();
				}
			}
			
			
			private function fechaJanela(): void{
				dispatchEvent(new FechaPopupEvent(this));
			}
			
			private function selecionaAba():void {
				limpaCamposPorAba();
				if (tabNav.selectedIndex == 1){
					listarGrupos();
				} 
				else 
					if (tabNav.selectedIndex == 0) {
						listarGrupos();
					}
					else listarMenus();	
			}
			
			private function falha(event:FaultEvent):void {
				var mensagem:String;
				try{
					if (event.fault.rootCause.message == null) {
						mensagem = event.fault.faultString;
					} else {
						mensagem = event.fault.rootCause.message;
					}
				}
				catch(e:Error){
					mensagem = "Serviço indisponível, reinicie a operação.";
				}
				ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, new Array(true, mensagem));
			}
			
			private function falhaMenu(event:FaultEvent):void {
				var mensagem:String = "Não é possível realizar a exclusão. Pois existem funções cadastradas nesse Menu.";
				lancaExcessao(new Array(true, mensagem));
			}
			
			private function falhaGrupo(event:FaultEvent):void {
				var mensagem:String = "Não é possível realizar a operação. Pois existem usuários cadastrados nesse Grupo.";
				lancaExcessao(new Array(true, mensagem));
			}
			
			private function lancaExcessao(params: Array): void{
				ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, params);
			}
			
			private function listarMenus(): void{
				facade.getOperation("listarMenus").send();				
			}
			
			private function listarMenus_result(event:ResultEvent):void {
				menus = event.result as ArrayCollection;
				if (tabNav.selectedIndex == 2){
					if (menus == null) {
						menus = new ArrayCollection();
						menus.addItem(event.result);
					}
					dgMenus.dataProvider = menus;
				}
				if (tabNav.selectedIndex == 3){
					cbMenu.dataProvider = menus;
					cbMenu.selectedIndex = -1;
					listarFuncoes();
				}
			}
			
			private function listarFuncoes():void{
				facade.getOperation("listarFuncoes").send()
			}
			
			private function listarFuncoes_result(event:ResultEvent):void{
				dgFuncoes.dataProvider = event.result; 
			}
			
			private function listarGrupos():void{
				facade.getOperation("listarGrupos").send()
			}
			
			private function listarGrupos_result(event:ResultEvent):void{
				grupos = event.result as ArrayCollection;
				var grupoAux: ArrayCollection = new ArrayCollection();
				if (currentState == "estadoProfessor"){
					for(var i: int = 0; i < grupos.length; i++){
						if(grupos.getItemAt(i).nome.toUpperCase() != "PROFESSOR" && grupos.getItemAt(i).nome.toUpperCase() != "ADMINISTRADOR"){
							if(!monitorLogado){
								grupoAux.addItem(grupos.getItemAt(i));	 
							}
							else{
								if(grupos.getItemAt(i).nome.toUpperCase() != "MONITOR"){
									grupoAux.addItem(grupos.getItemAt(i));
								}
							}
						}
					}
					cbGrupoUsuarioAlt.dataProvider = grupoAux;
					if (grupos.length != 0){
						cbGrupoUsuarioAlt.selectedIndex = 0;
						filtrarUsuarioPorGrupo();
					}
					else{
						cbGrupoUsuarioAlt.selectedIndex = -1;
					}
				}
				else{
					if (tabNav.selectedIndex == 1){
						if (grupos == null) {
							grupos = new ArrayCollection();
							grupos.addItem(event.result);
						}
						dgGrupos.dataProvider = grupos;
					}
					if (tabNav.selectedIndex == 0){
						cbGrupoUsuario.dataProvider = grupos;
						if (grupos.length != 0){
							cbGrupoUsuario.selectedIndex = 0;
							filtrarUsuarioPorGrupo();
						}
						else{
							cbGrupoUsuario.selectedIndex = -1;
						}
					}
				}
			}
			
			private function labelGridMenus(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Nome":
						sLabel = item.nome;
						break;
					case "Rótulo":
						sLabel = item.rotulo;
						break;
				}
				return sLabel;
			}
			
			private function labelGridFuncoes(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Rótulo":
						sLabel = item.rotulo;
						break;
					case "Nome":
						sLabel = item.nome;
						break;
				}
				return sLabel;
			}
			
			private function labelGridGrupos(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Grupo":
						sLabel = item.nome;
						break;
				}
				return sLabel;
			}
			
			private function labelGridUsuarios(item:*, column:DataGridColumn):String {
				var sLabel:String = "";
				var sHeaderText:String = column.headerText;
				switch (sHeaderText)  {
					case "Login":
						sLabel = item.usuario.login;
						break;
					case "Usuário":
						sLabel = item.usuario.nome;
						break;
				}
				return sLabel;
			}
			
			private function cadastrarMenu(): void{
				menu = new Menu();
				editarMenu();
			}
			
			private function editarMenu():void {
				menu.nome = StringUtil.trim(inputNomeMenu.text);
				menu.rotulo = StringUtil.trim(inputRotuloMenu.text);
				facade.getOperation("cadastrarMenu").send(menu);
			}
			
			private function excluirMenu():void {
				facade.getOperation("excluirMenu").send(menu);
			}
			
			private function excluirMenu_result(): void{
				listarMenus();
				limpaCamposPorAba();
			}
			
			private function cadastrarMenu_result(event:ResultEvent): void{
				var menuP: Menu = CastDeEntidades.castMenu(event.result);
				if (menuP != null && menuP.idMenu != 0){
					listarMenus();	
					inputNomeMenu.text = "";
					inputRotuloMenu.text = "";
				}
				else{
					var paramErro:Array = new Array(true, "Falha ao cadastrar este Menu.");
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, paramErro);
				} 	
			}
			
			private function selecionarMenu(): void{
				if (dgMenus.selectedItem != null) {
					menu.idMenu = dgMenus.selectedItem.idMenu;
					menu.nome = dgMenus.selectedItem.nome;
					menu.rotulo = dgMenus.selectedItem.rotulo;
					inputNomeMenu.text = menu.nome;
					inputRotuloMenu.text = menu.rotulo;
					botaoCadastrarMenu.visible = false;
					botaoAtualizarMenu.visible = true;
					botaoRemoverMenu.visible = true;
				}
			}
			
			private function cadastrarFuncao(): void{
				funcao = new Funcao();
				editarFuncao();
			}
			
			private function editarFuncao():void {
				funcao.nome = StringUtil.trim(inputNomeFuncao.text);
				funcao.rotulo = StringUtil.trim(inputRotuloFuncao.text);
				funcao.menu = CastDeEntidades.castMenu(cbMenu.selectedItem);
				facade.getOperation("cadastrarFuncao").send(funcao);
			}
			
			private function excluirFuncao():void {
				facade.getOperation("excluirFuncao").send(funcao);
			}
			
			private function excluirFuncao_result(): void{
				listarFuncoes();
				limpaCamposPorAba();
			}
			
			private function filtrarFuncoesPorMenu():void {
				try{
					handleValidaFuncao(null);
					var menuAux : * = cbMenu.selectedItem;
					facade.getOperation("consultarFuncaoPorMenu").send(menuAux.idMenu);
				} catch(e: Error){}
				
			}
			
			private function consultarFuncaoPorMenu_result(event:ResultEvent): void{
				dgFuncoes.dataProvider = new ArrayCollection();
				dgFuncoes.dataProvider = event.result as ArrayCollection;
			}
			
			private function cadastrarFuncao_result(event:ResultEvent): void{
				var funcaoP: Funcao = CastDeEntidades.castFuncao(event.result);
				if (funcaoP != null && funcaoP.idFuncao != 0){
					listarFuncoes();	
					inputNomeFuncao.text = "";
					inputRotuloFuncao.text = "";
				}
				else{
					var paramErro:Array = new Array(true, "Falha ao cadastrar esta Função.");
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, paramErro);
				} 	
			}
			
			private function selecionarFuncao(): void{
				if (dgFuncoes.selectedItem != null) {
					funcao.idFuncao = dgFuncoes.selectedItem.idFuncao;
					funcao.nome = dgFuncoes.selectedItem.nome;
					funcao.rotulo = dgFuncoes.selectedItem.rotulo;
					funcao.menu = CastDeEntidades.castMenu(dgFuncoes.selectedItem.menu);
					inputNomeFuncao.text = funcao.nome;
					inputRotuloFuncao.text = funcao.rotulo;
					cbMenu.selectedIndex = Util.pegaPosObjeto("idMenu", ArrayCollection(cbMenu.dataProvider), funcao.menu);
					botaoCadastrarFuncao.visible = false;
					botaoAtualizarFuncao.visible = true;
					botaoRemoverFuncao.visible = true;
					botaoRemoverFuncao.enabled = true;
					botaoAtualizarFuncao.enabled = true;
				}
			}
			
			private function cadastrarGrupo(): void{
				grupo = new Grupo();
				editarGrupo();
			}
			
			private function editarGrupo():void {
				grupo.nome = StringUtil.trim(inputGrupo.text);
				facade.getOperation("cadastrarGrupo").send(grupo);
			}
			
			private function excluirGrupo():void {
				facade.getOperation("excluirGrupo").send(grupo);
			}
			
			private function excluirGrupo_result(): void{
				listarGrupos();
				limpaCamposPorAba();
			}
			
			private function cadastrarGrupo_result(event:ResultEvent): void{
				var grupoP: Grupo = CastDeEntidades.castGrupo(event.result);
				if (grupoP != null && grupoP.idGrupo != 0){
					listarGrupos();	
					inputGrupo.text = "";
				}
				else{
					var paramErro:Array = new Array(true, "Falha ao cadastrar este Grupo.");
					ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this, paramErro);
				} 	
			}
			
			private function selecionarGrupo(): void{
				if (dgGrupos.selectedItem != null) {
					grupo.idGrupo = dgGrupos.selectedItem.idGrupo;
					grupo.nome = dgGrupos.selectedItem.nome;
					inputGrupo.text = grupo.nome;
					botaoCadastrarGrupo.visible = false;
					botaoAtualizarGrupo.visible = true;
					botaoRemoverGrupo.visible = true;
				}
			}
			
			private function cadastrarGrupoUsuario(): void{
				primeiroCadastro = true;
				usuario = new Usuario();
				grupoUsuario = new GrupoUsuario();
				verificaUsuario();
			}
			
			private function getUsuarioPorLogin_result(event:ResultEvent): void{
				var mens:Array = new Array(true, "Login já existente, alteração não realizada.");
				lancaExcessao(mens);
			}
			
			private function falhaUsuarioExistente(event:FaultEvent):void {
				if(primeiroCadastro){
					if (currentState != "estadoProfessor"){
						if(inputSenhaUsuario.text.length == 0){
							facade.getOperation("gerarSenha").send(6,"");		
						}
						else{
							editarUsuario();
						}
					}else{
						if(inputSenhaUsuarioAlt.text.length == 0){
							facade.getOperation("gerarSenha").send(6,"");
						}
						else{
							editarUsuario();
						}
					}
				}
				else{
					editarUsuario();		
				}
			}
			
			private function gerarSenha_result(event:ResultEvent): void{
				senhaGerada = event.result as String;
				editarUsuario();
			}
			
			private function verificaUsuario(): void{
				try{
					if (currentState != "estadoProfessor"){
						if(primeiroCadastro){
							facade.getOperation("getUsuarioPorLogin").send(StringUtil.trim(inputLoginUsuario.text));
						}
						else{
							if(dgUsuarios.selectedItem.usuario.login != StringUtil.trim(inputLoginUsuario.text)){
								facade.getOperation("getUsuarioPorLogin").send(StringUtil.trim(inputLoginUsuario.text));	
							}
							else{
								editarUsuario();		
							}
						}
					}
					else{
						if(primeiroCadastro){
							facade.getOperation("getUsuarioPorLogin").send(StringUtil.trim(inputLoginUsuarioAlt.text));
						}
						else{
							if(dgUsuariosAlt.selectedItem.usuario.login != StringUtil.trim(inputLoginUsuario.text)){
								facade.getOperation("getUsuarioPorLogin").send(StringUtil.trim(inputLoginUsuarioAlt.text));	
							}
							else{
								editarUsuario();		
							}	
						}
					}
				}catch(e: Error){
					editarUsuario();
				}
			}
			
			private function editarUsuario(): void{
				var mens:Array;
				if (currentState != "estadoProfessor"){
					if(inputSenhaUsuario.text.length != 0 && inputSenhaUsuario.text.length < 6){
						mens = new Array(true, "Senha muito pequena, cadastro não realizado.");
						lancaExcessao(mens);
					}
					else{
						if(dgUsuarios.selectedItem != null){
							if(!primeiroCadastro) usuario.idUsuario = dgUsuarios.selectedItem.usuario.idUsuario;
							if(StringUtil.trim(inputSenhaUsuario.text) != ""){
								usuario.senha = StringUtil.trim(inputSenhaUsuario.text);
							}else{
								usuario.senha = dgUsuarios.selectedItem.usuario.senha;
							}	
						}else{
							if(primeiroCadastro && inputSenhaUsuario.text.length == 0){
								usuario.senha = senhaGerada;
							}
							else{
								usuario.senha = StringUtil.trim(inputSenhaUsuario.text);
							}	
						}
						usuario.login = StringUtil.trim(inputLoginUsuario.text);
						usuario.nome = StringUtil.trim(inputNomeUsuario.text);
						usuario.email = StringUtil.trim(inputEmailUsuario.text);
						grupoUsuario.grupo = CastDeEntidades.castGrupo(cbGrupoUsuario.selectedItem);
						grupoUsuario.usuario = usuario;
						facade.getOperation("cadastrarUsuario").send(grupoUsuario);
					}
				}
				else{
					if(inputSenhaUsuarioAlt.text.length != 0 && inputSenhaUsuarioAlt.text.length < 6){
						mens = new Array(true, "Senha muito pequena, cadastro não realizado.");
						lancaExcessao(mens);
					}
					else{
						if(dgUsuariosAlt.selectedItem != null){
							if(!primeiroCadastro) usuario.idUsuario = dgUsuariosAlt.selectedItem.usuario.idUsuario;
							if(StringUtil.trim(inputSenhaUsuarioAlt.text) != ""){
								usuario.senha = StringUtil.trim(inputSenhaUsuarioAlt.text);
							}else{
								usuario.senha = dgUsuariosAlt.selectedItem.usuario.senha;
							}	
						}else{
							if(primeiroCadastro && inputSenhaUsuarioAlt.text.length == 0){
								usuario.senha = senhaGerada;
							}
							else{
								usuario.senha = StringUtil.trim(inputSenhaUsuarioAlt.text);
							}	
						}
						usuario.login = StringUtil.trim(inputLoginUsuarioAlt.text);
						usuario.nome = StringUtil.trim(inputNomeUsuarioAlt.text);
						usuario.email = StringUtil.trim(inputEmailUsuarioAlt.text);
						grupoUsuario.grupo = CastDeEntidades.castGrupo(cbGrupoUsuarioAlt.selectedItem);
						grupoUsuario.usuario = usuario;
						facade.getOperation("cadastrarUsuario").send(grupoUsuario);
					}
				}
			}
			
			private function excluirUsuario():void {
				facade.getOperation("excluirUsuario").send(grupoUsuario);
			}
			
			private function excluirGrupoUsuario_result(): void{
				filtrarUsuarioPorGrupo();
				limpaCamposPorAba();
				var mens: Array = new Array(false, "Usuário removido com sucesso!");
				lancaExcessao(mens);
			}
			
			private function cadastrarUsuario_result(event:ResultEvent): void{
				var grupoUsuarioP: GrupoUsuario = CastDeEntidades.castGrupoUsuario(event.result);
				if (grupoUsuarioP != null && grupoUsuarioP.idGrupoUsuario != 0){
					filtrarUsuarioPorGrupo();
					if (currentState != "estadoProfessor"){
						inputLoginUsuario.text = "";
						inputNomeUsuario.text = "";
						senhaCadastrada = inputSenhaUsuario.text;
						inputSenhaUsuario.text = "";
						inputEmailUsuario.text = "";
					}
					else{	
						inputLoginUsuarioAlt.text = "";
						inputNomeUsuarioAlt.text = "";
						senhaCadastrada = inputSenhaUsuarioAlt.text;
						inputSenhaUsuarioAlt.text = "";
						inputEmailUsuarioAlt.text = "";
					}
				}
				var mens:Array;
				if (primeiroCadastro){
					envioEmails(grupoUsuarioP);
					primeiroCadastro = false;
					filtrarUsuarioPorGrupo();
				}
				else{
					mens = new Array(false, "Dados atualizados com sucesso!");
					lancaExcessao(mens);
				}
			}
			
			private function envioEmails(grupoUsuarioP: GrupoUsuario):void {
				if(senhaCadastrada == ""){
					senhaCadastrada = senhaGerada;
				}
				mensagem = "<BR>Parabéns, você foi cadastrado no sistema Easy Lab Correction da disciplina Laboratório de Estrutura de Dados.</BR>" +
						"<BR></BR>" +				
						"<BR>Informamos que o envio de roteiros será realizado através do sistema mediante os seguintes dados de acesso:</BR>" +
						"<BR></BR>" +
						"Login:<BR>" + grupoUsuarioP.usuario.login + "</BR>" + 
						"<BR>Senha:</BR><BR>"+ senhaCadastrada +"</br><p>Obs.:\nLembre-se! Sua senha é pessoal e intransferível, " +
						"sugerimos sua alteração imediata.</p>" + 
						"<BR>Clique <a href=http://easyLabCorrection.dsc.ufcg.edu>aqui</a> para acessar o sistema.</BR>" +
						"<BR></BR>" +
						"<BR>Atenciosamente,</BR>" +
						"<BR>Easy Lab Correction</BR>";
				
				mensagem = Util.geraCodigosHTML(mensagem);
				contato = grupoUsuarioP.usuario.email;
				nomeUsuario = grupoUsuarioP.usuario.nome;
				servicoEnviarEmail.send();
				
			}
			
			private function selecionarUsuario(): void{
				if (currentState != "estadoProfessor"){
					if (dgUsuarios.selectedItem != null) {
						grupoUsuario.idGrupoUsuario = dgUsuarios.selectedItem.idGrupoUsuario;
						grupoUsuario.usuario = CastDeEntidades.castUsuario(dgUsuarios.selectedItem.usuario);
						grupoUsuario.grupo = dgUsuarios.selectedItem.grupo;
						cbGrupoUsuario.selectedIndex = Util.pegaPosObjeto("idGrupo", ArrayCollection(cbGrupoUsuario.dataProvider), grupoUsuario.grupo);
						inputNomeUsuario.text = grupoUsuario.usuario.nome;
						inputLoginUsuario.text = grupoUsuario.usuario.login;
						inputEmailUsuario.text = grupoUsuario.usuario.email;
						botaoCadastrarUsuario.visible = false;
						botaoAtualizarUsuario.visible = true;
						botaoNovoUsuario.visible = true;
						botaoRemoverUsuario.visible = true;
					}
				}
				else{
					if (dgUsuariosAlt.selectedItem != null) {
						grupoUsuario.idGrupoUsuario = dgUsuariosAlt.selectedItem.idGrupoUsuario;
						grupoUsuario.usuario = CastDeEntidades.castUsuario(dgUsuariosAlt.selectedItem.usuario);
						grupoUsuario.grupo = dgUsuariosAlt.selectedItem.grupo;
						cbGrupoUsuarioAlt.selectedIndex = Util.pegaPosObjeto("idGrupo", ArrayCollection(cbGrupoUsuarioAlt.dataProvider), grupoUsuario.grupo);
						inputNomeUsuarioAlt.text = grupoUsuario.usuario.nome;
						inputLoginUsuarioAlt.text = grupoUsuario.usuario.login;
						inputEmailUsuarioAlt.text = grupoUsuario.usuario.email;
						botaoCadastrarUsuarioAlt.visible = false;
						botaoAtualizarUsuarioAlt.visible = true;
						botaoNovoUsuarioAlt.visible = true;
						botaoRemoverUsuarioAlt.visible = true;
					}
				}
			}
			
			private function mudaCadastrar(): void {
				limpaCamposPorAba();
				
			}
			
			private function limpaCamposPorAba():void {
				if (currentState != "estadoProfessor"){
					if (tabNav.selectedIndex == 2){
						limpaCamposMenu();
						botaoCadastrarMenu.visible = true;
						botaoAtualizarMenu.visible = false;
						botaoRemoverMenu.visible = false;
					}
					if (tabNav.selectedIndex == 3){
						limpaCamposFuncao();
						botaoCadastrarFuncao.visible = true;
						botaoAtualizarFuncao.visible = false;
						botaoRemoverFuncao.visible = false;
					}
					if (tabNav.selectedIndex == 1){
						limpaCamposGrupo();
						botaoCadastrarGrupo.visible = true;
						botaoAtualizarGrupo.visible = false;
						botaoRemoverGrupo.visible = false;
					}
					if (tabNav.selectedIndex == 0){
						limpaCamposUsuario();
						botaoCadastrarUsuario.visible = true;
						botaoAtualizarUsuario.visible = false;
						botaoNovoUsuario.visible = false;
						botaoRemoverUsuario.visible = false;
					}
				}
				else{
					limpaCamposUsuario();
					botaoCadastrarUsuarioAlt.visible = true;
					botaoAtualizarUsuarioAlt.visible = false;
					botaoNovoUsuarioAlt.visible = false;
					botaoRemoverUsuarioAlt.visible = false;
				}
			}
			
			private function limpaCamposMenu(): void{
				inputNomeMenu.text = "";
				inputRotuloMenu.text = "";	
			}
			
			private function limpaCamposFuncao(): void{
				inputNomeFuncao.text = "";
				inputRotuloFuncao.text = "";
				cbMenu.selectedIndex = -1;	
			}
			
			private function limpaCamposGrupo(): void{
				inputGrupo.text = "";	
			}
			
			private function limpaCamposUsuario(): void{
				if (currentState != "estadoProfessor"){
					inputLoginUsuario.text = "";
					inputNomeUsuario.text = "";
					inputSenhaUsuario.text = "";
					inputEmailUsuario.text = "";
					//cbGrupoUsuario.selectedIndex = -1;
					//dgUsuarios.dataProvider = new ArrayCollection;
				}
				else{
					inputLoginUsuarioAlt.text = "";
					inputNomeUsuarioAlt.text = "";
					inputSenhaUsuarioAlt.text = "";
					inputEmailUsuarioAlt.text = "";
					//scbGrupoUsuarioAlt.selectedIndex = -1;
					//dgUsuariosAlt.dataProvider = new ArrayCollection;
				}
			}
			
			private function filtrarUsuarioPorGrupo(): void{
				try{
					handleValidaUsuario(null);
					var grupoUsuarioAux : *;
					if (currentState != "estadoProfessor"){
						grupoUsuarioAux = cbGrupoUsuario.selectedItem;	
					}
					else{
						grupoUsuarioAux = cbGrupoUsuarioAlt.selectedItem;
					}
					facade.getOperation("consultarUsuarioPorGrupo").send(grupoUsuarioAux.idGrupo);
				} catch(e: Error){}
			}
			
			private function consultarUsuarioPorGrupo_result(event:ResultEvent): void{
				if (currentState != "estadoProfessor"){
					dgUsuarios.dataProvider = new ArrayCollection();
					dgUsuarios.dataProvider = event.result as ArrayCollection;
					if(dgUsuarios.dataProvider.length > 0){
						dgUsuarios.selectedIndex = 0;
						selecionarUsuario();
					}
					else{
						mudaCadastrar();
					}
				}
				else{
					dgUsuariosAlt.dataProvider = new ArrayCollection();
					dgUsuariosAlt.dataProvider = event.result as ArrayCollection;
					if(dgUsuariosAlt.dataProvider.length > 0){
						dgUsuariosAlt.selectedIndex = 0;
						selecionarUsuario();
					}
					else{
						mudaCadastrar();
					}
				}
			}
						
			private function handleValidaMenu(eventObj:ValidationResultEvent):void {
				if (StringUtil.trim(inputNomeMenu.text) != "" && StringUtil.trim(inputRotuloMenu.text) != ""){     
               		botaoCadastrarMenu.enabled = true;
            		botaoAtualizarMenu.enabled = true;
            	    botaoRemoverMenu.enabled = true;
        		}
        		else{        
               		botaoCadastrarMenu.enabled = false;
            		botaoAtualizarMenu.enabled = false;
            	    botaoRemoverMenu.enabled = false;
        		}
            }
            
            private function handleValidaFuncao(eventObj:ValidationResultEvent):void {
            	if (StringUtil.trim(inputNomeFuncao.text) != "" && 
                	StringUtil.trim(inputRotuloFuncao.text) != "" &&
                	cbMenu.selectedIndex != -1){
                 	botaoCadastrarFuncao.enabled = true;
                	botaoAtualizarFuncao.enabled = true;
                	botaoRemoverFuncao.enabled = true;
             	}
             	else{             		
                   	botaoCadastrarFuncao.enabled = false;
                	botaoAtualizarFuncao.enabled = false;
                	botaoRemoverFuncao.enabled = false;	
             	}
            }
            
            private function handleValidaGrupo(eventObj:ValidationResultEvent):void {
                if (StringUtil.trim(inputGrupo.text) != ""){                
                    botaoCadastrarGrupo.enabled = true;
                 	botaoAtualizarGrupo.enabled = true;
                 	botaoRemoverGrupo.enabled = true;                 	
            	}                    
                else{                
                    botaoCadastrarGrupo.enabled = false;
                 	botaoAtualizarGrupo.enabled = false;
                 	botaoRemoverGrupo.enabled = false;	
                }   
            }
            
            private function handleValidaUsuario(eventObj:ValidationResultEvent):void {
            	if (currentState != "estadoProfessor"){
	                if (StringUtil.trim(inputNomeUsuario.text) != "" && 
	                	StringUtil.trim(inputLoginUsuario.text) != "" &&
	                	emailValido &&
	                	cbGrupoUsuario.selectedIndex != -1){
	                	botaoCadastrarUsuario.enabled = true;
	                	botaoAtualizarUsuario.enabled = true;
	                	botaoNovoUsuario.enabled = true;
	                	botaoRemoverUsuario.enabled = true;                	
	                }
	                else{
	                	botaoCadastrarUsuario.enabled = false;               	
	                }
            	}
            	else{
            		 if (StringUtil.trim(inputNomeUsuarioAlt.text) != "" && 
	                	StringUtil.trim(inputLoginUsuarioAlt.text) != "" &&
	                	emailValido &&
	                	cbGrupoUsuarioAlt.selectedIndex != -1){
	                	botaoCadastrarUsuarioAlt.enabled = true;
	                	botaoAtualizarUsuarioAlt.enabled = true;
	                	botaoNovoUsuarioAlt.enabled = true;
	                	botaoRemoverUsuarioAlt.enabled = true;                	
	                }
	                else{
	                	botaoCadastrarUsuarioAlt.enabled = false;              	
	                }
            	}
            }
            
            private function lancaEvento(event:FaultEvent):void {
				var e:FaultEvent = new FaultEvent(FaultEvent.FAULT, true, true,
					event.fault, event.token, event.message);
				dispatchEvent(e);
			}
			
			private function handleEmail(event:ResultEvent):void {
				var tipo: String = "";
				if (currentState != "estadoProfessor"){
					tipo = cbGrupoUsuario.selectedItem.nome;
				}else{
					tipo = cbGrupoUsuarioAlt.selectedItem.nome;
				}
				ControladorDeModulos.criaModulo("modulos/sistema/MensagemStatus.swf", this,
					[false, tipo + " cadastrado com sucesso! Email já enviado."]);
			}
            
            private function falhaRemove(event:FaultEvent):void{
				var mens:Array = new Array(true, "Não é possível realizar a operação.");
				lancaExcessao(mens);
			}
			
			private function invalidaEmail(event:ValidationResultEvent):void {
				emailValido = false;
				if (currentState != "estadoProfessor"){
                	botaoCadastrarUsuario.enabled = false;
                	botaoAtualizarUsuario.enabled = false;
                	botaoNovoUsuario.enabled = false;
                	botaoRemoverUsuario.enabled = false;
            	}
            	else{
	                botaoCadastrarUsuarioAlt.enabled = false;
	                botaoAtualizarUsuarioAlt.enabled = false;
	                botaoNovoUsuarioAlt.enabled = false;
	                botaoRemoverUsuarioAlt.enabled = false;	                
            	}
			}
			
			private function validaEmail(event:ValidationResultEvent):void {
				emailValido = true;
				handleValidaUsuario(event);
			}
			
		]]>
	</mx:Script>
	
	<mx:RemoteObject id="facade" destination="easyCorrection" showBusyCursor="true">
		
		<mx:method name="listarMenus" result="listarMenus_result(event)" fault="falha(event)"/>
		<mx:method name="listarFuncoes" result="listarFuncoes_result(event)" fault="falha(event)"/>
		<mx:method name="listarGrupos" result="listarGrupos_result(event)" fault="falha(event)"/>
		<mx:method name="cadastrarMenu" result="cadastrarMenu_result(event)" fault="falha(event)"/>
		<mx:method name="cadastrarFuncao" result="cadastrarFuncao_result(event)" fault="falha(event)"/>
		<mx:method name="consultarFuncaoPorMenu" result="consultarFuncaoPorMenu_result(event)" fault="falha(event)"/>
		<mx:method name="cadastrarGrupo" result="cadastrarGrupo_result(event)" fault="falha(event)"/>
		<mx:method name="cadastrarUsuario" result="cadastrarUsuario_result(event)" fault="falha(event)"/>
		<mx:method name="consultarUsuarioPorGrupo" result="consultarUsuarioPorGrupo_result(event)" fault="falha(event)"/>
		<mx:method name="getGrupoUsuarioPorUsuario" result="getGrupoUsuarioPorUsuario_result(event)" fault="falha(event)"/>
		<mx:method name="getUsuarioPorLogin" result="getUsuarioPorLogin_result(event)" fault="falhaUsuarioExistente(event)"/>
		<mx:method name="excluirMenu" result="excluirMenu_result()" fault="falhaMenu(event)"/>
		<mx:method name="excluirFuncao" result="excluirFuncao_result()" fault="falha(event)"/>
		<mx:method name="excluirGrupo" result="excluirGrupo_result()" fault="falhaGrupo(event)"/>
		<mx:method name="excluirUsuario" result="excluirGrupoUsuario_result()" fault="falhaRemove(event)"/>
		<mx:method name="gerarSenha" result="gerarSenha_result(event)" fault="falha(event)"/>
		
	</mx:RemoteObject>
	
	<mx:HTTPService id="servicoEnviarEmail" method="POST" 
    	url="{ExternalInterface.call('getUrlSendMail')}"
    	useProxy="false"
    	resultFormat="text"
    	result="handleEmail(event)"
    	fault="lancaEvento(event)"
    	showBusyCursor="true">
	    <mx:request>
	        <assunto>{assunto}</assunto>
	        <contato>{contato}</contato>
	        <mensagem>{mensagem}</mensagem>
	        <nomeUsuario>{nomeUsuario}</nomeUsuario>
	    </mx:request>
	</mx:HTTPService>
	
	<mx:Validator required="true" id="validatorNomeMenu" source="{inputNomeMenu}"
    	property="text" valid="handleValidaMenu(event)" invalid="handleValidaMenu(event)"
    	requiredFieldError="Informe o nome do menu."/>
    	
    <mx:Validator required="true" id="validatorRotuloMenu" source="{inputRotuloMenu}"
    	property="text" valid="handleValidaMenu(event)" invalid="handleValidaMenu(event)"
    	requiredFieldError="Informe o rótulo do menu."/>
    	
    <mx:Validator required="true" id="validatorNomeFuncao" source="{inputNomeFuncao}"
    	property="text" valid="handleValidaFuncao(event)" invalid="handleValidaFuncao(event)"
    	requiredFieldError="Informe o nome da função."/>
    	
    <mx:Validator required="true" id="validatorRotuloFuncao" source="{inputRotuloFuncao}"
    	property="text" valid="handleValidaFuncao(event)" invalid="handleValidaFuncao(event)"
    	requiredFieldError="Informe o rótulo da função."/>
    	
    <mx:Validator required="true" id="validatorMenuFuncao" source="{cbMenu}"
    	property="text" valid="handleValidaFuncao(event)" invalid="handleValidaFuncao(event)"
    	requiredFieldError="Informe o menu da função."/>
    	
    <mx:Validator required="true" id="validatorGrupo" source="{inputGrupo}"
    	property="text" valid="handleValidaGrupo(event)" invalid="handleValidaGrupo(event)"
    	requiredFieldError="Informe o nome de grupo."/>
    	
    <mx:Validator required="true" id="validatorLoginUsuario" source="{inputLoginUsuario}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe o login do usuário."/>
    	
    <mx:Validator required="true" id="validatorNomeUsuario" source="{inputNomeUsuario}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe o nome do usuário."/>
    	
    <mx:Validator required="true" id="validatorEmailUsuario" source="{inputEmailUsuario}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe o email do usuário."/>
    	
    <mx:Validator required="true" id="validatorGrupoUsuario" source="{cbGrupoUsuario}"
    	property="text" valid="handleValidaUsuario(event)" invalid="handleValidaUsuario(event)"
    	requiredFieldError="Informe o grupo do usuário."/>
    
    <mx:EmailValidator id="emailValidator" invalid="invalidaEmail(event)" valid="validaEmail(event)"
		source="{inputEmailUsuario}" property="text" trigger="{inputEmailUsuario}" 
		triggerEvent="change"
		invalidCharError="Seu endereço de email contém caracteres inválidos."
	    invalidDomainError= "O dominio de seu endereço de email está formatado incorretamente." 
	    invalidIPDomainError="The endereço IP do dominio de seu email está formatado incorretamente." 
	    invalidPeriodsInDomainError="O domínio do seu endereço de email possui pontos consecutivos." 
	    missingAtSignError="Um caracter @ está faltando no seu endereço de email."
	    missingPeriodInDomainError="Está faltando um ponto (.) no seu endereço de email." 
	    missingUsernameError="O nome de usuário está faltando no seu endereço de email." 
	    tooManyAtSignsError="Seu endereço de email contém muitos caracteres @."
	/>
	
	<mx:TabNavigator change="selecionaAba()" width="100%" height="100%" id = "tabNav" visible="false">	
		
		<mx:Canvas label="Usuário" width="100%" height="100%" id="canvas4">
			<mx:ComboBox prompt="selecione..." x="64" y="10" width="548" labelField="nome" id="cbGrupoUsuario" toolTip="{toolTipGrupoUsuario}" change="filtrarUsuarioPorGrupo()"/>
			<mx:TextInput x="64" y="41" width="548" id="inputNomeUsuario" toolTip="{toolTipNomeUsuario}" change="handleValidaUsuario(null)"/>
			<mx:TextInput x="64" y="70.5" width="348" id="inputLoginUsuario" toolTip="{toolTipLoginUsuario}" change="handleValidaUsuario(null)"/>
			<mx:TextInput x="478" y="70.5" width="134" id="inputSenhaUsuario" displayAsPassword="true"/>
			<mx:TextInput x="64" y="100.5" width="548" id="inputEmailUsuario" toolTip="{toolTipEmailUsuario}" change="handleValidaUsuario(null)"/>
			<mx:Button x="243.5" y="132.5" label="   Salvar" click="cadastrarGrupoUsuario()" icon="@Embed(source='../../image/disquete.png')" width="135" id="botaoCadastrarUsuario" height="28" enabled="false"/>
			<mx:Button x="100.5" y="132.5" label="   Novo" width="135" height="28" id="botaoNovoUsuario" click="mudaCadastrar()" icon="@Embed(source='../../image/novo.png')"/>
			<mx:Button x="386.5" y="132.5" label="   Remover" click="excluirUsuario()" icon="@Embed(source='../../image/delete.png')" width="135" id="botaoRemoverUsuario" height="28"/>
			<mx:Button x="243.5" y="132.5" label="   Atualizar" click="verificaUsuario()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="botaoAtualizarUsuario" height="28"/>
			<mx:Label x="10" y="11.5" text="Grupo:" id="labelGrupoUsuario"/>
			<mx:Label x="10" y="43" text="Nome:" id="labelNomeUsuario"/>
			<mx:Label x="12" y="72.5" text="Login:" id="labelLoginUsuario"/>
			<mx:Label x="12" y="102.5" text="Email:" id="labelEmailUsuario"/>
			<mx:Label x="420" y="72.5" text="Senha:" id="labelSenhaUsuario"/>
			<mx:DataGrid x="10" y="168.5" width="602" height="188.5" draggableColumns="false" change="selecionarUsuario()" itemClick="selecionarUsuario()"
					 labelFunction="labelGridUsuarios" id="dgUsuarios">
				<mx:columns>
					<mx:DataGridColumn headerText="Login" dataField="id" width="200"/>
					<mx:DataGridColumn headerText="Usuário"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas label="Grupo" width="100%" height="100%" id="canvas3">
			<mx:TextInput x="74" y="45" width="538" id="inputGrupo" toolTip="{toolTipNomeGrupo}" change="handleValidaGrupo(null)"/>
			<mx:Label x="18" y="45.5" text="Grupo:" id="labelGrupo"/>
			<mx:Button x="243.5" y="90" label="   Cadastrar" icon="@Embed(source='../../image/disquete.png')" width="135" click="cadastrarGrupo()" id="botaoCadastrarGrupo" height="28" enabled="false"/>
			<mx:Button x="548" y="23" label="Novo" width="63" id="botaoNovoGrupo" height="23" click="mudaCadastrar()"/>
			<mx:Button x="315" y="90" label="   Remover" click="excluirGrupo()" icon="@Embed(source='../../image/delete.png')" width="135" id="botaoRemoverGrupo" height="28" visible="false" enabled="false"/>
			<mx:Button x="172" y="90" label="   Atualizar" click="editarGrupo()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="botaoAtualizarGrupo" height="28" visible="false" enabled="false"/>
			<mx:DataGrid x="10" y="141" width="602" height="216" change="selecionarGrupo()" itemClick="selecionarGrupo()"
					draggableColumns="false" labelFunction="labelGridGrupos" id="dgGrupos">
				<mx:columns>
					<mx:DataGridColumn headerText="Grupo"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas label="Menu" width="100%" height="100%" id="canvas1">		
			<mx:TextInput x="64" y="45" width="548" id="inputNomeMenu" toolTip="{toolTipNomeMenu}" change="handleValidaMenu(null)"/>
			<mx:TextInput x="64" y="73" width="548" id="inputRotuloMenu" toolTip="{toolTipRotuloMenu}" change="handleValidaMenu(null)"/>
			<mx:Button x="243.5" y="111" label="   Cadastrar" icon="@Embed(source='../../image/disquete.png')" click="cadastrarMenu()" width="135" id="botaoCadastrarMenu" height="28" enabled="false"/>
			<mx:Button x="548" y="23" label="Novo" width="63" click="mudaCadastrar()" id="botaoNovoMenu" height="23"/>
			<mx:Label x="10" y="47" text="Nome:" id="labelNomeMenu"/>
			<mx:Label x="10" y="75" text="Rótulo:" id="labelRotuloMenu"/>
			<mx:Button x="315" y="111" label="   Remover" click="excluirMenu()" icon="@Embed(source='../../image/delete.png')" width="135" id="botaoRemoverMenu" height="28" visible="false" enabled="false"/>
			<mx:Button x="172" y="111" label="   Atualizar" click="editarMenu()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="botaoAtualizarMenu" height="28" enabled="false" visible="false"/>
			<mx:DataGrid x="10" y="155" width="602" change="selecionarMenu()" itemClick="selecionarMenu()" 
					height="204" labelFunction="labelGridMenus" draggableColumns="false" id="dgMenus">
				<mx:columns>
					<mx:DataGridColumn headerText="Rótulo" width="100"/>
					<mx:DataGridColumn headerText="Nome"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas label="Função" width="100%" height="100%" id="canvas2">
			<comp:ComboBoxAC labelField="nome" x="62" y="15.5" width="550" id="cbMenu" toolTip="{toolTipMenuFuncao}" change="filtrarFuncoesPorMenu()"/>
			<mx:TextInput x="62" y="76" width="550" id="inputNomeFuncao" toolTip="{toolTipNomeFuncao}" change="handleValidaFuncao(null)"/>
			<mx:TextInput x="62" y="104" width="550" id="inputRotuloFuncao" toolTip="{toolTipNomeFuncao}" change="handleValidaFuncao(null)"/>
			<mx:Button x="243.5" y="144" label="   Cadastrar" icon="@Embed(source='../../image/disquete.png')" width="135" 
				id="botaoCadastrarFuncao" click="cadastrarFuncao()" height="28" enabled="false"/>
			<mx:Button x="548" y="54" label="Novo" width="63" id="botaoNovaFuncao" height="23" click="mudaCadastrar()"/>
			<mx:Button x="315" y="143" label="   Remover" click="excluirFuncao()" icon="@Embed(source='../../image/delete.png')" width="135" id="botaoRemoverFuncao" height="28" visible="false" enabled="false"/>
			<mx:Button x="172" y="143" label="   Atualizar" click="editarFuncao()" icon="@Embed(source='../../image/atualiza.png')" width="135" id="botaoAtualizarFuncao" height="28" visible="false" enabled="false"/>
			<mx:Label x="10" y="16.5" text="Menu:" id="labelCbMenu"/>
			<mx:Label x="10" y="78" text="Nome:" id="labelNomeFuncao"/>
			<mx:Label x="10" y="106" text="Rótulo:" id="labelRotuloFuncao"/>
			<mx:DataGrid x="10" y="189" width="602" height="168" change="selecionarFuncao()" itemClick="selecionarFuncao()"
					draggableColumns="false" labelFunction="labelGridFuncoes" id="dgFuncoes">
				<mx:columns>
					<mx:DataGridColumn headerText="Rótulo" width="100"/>
					<mx:DataGridColumn headerText="Nome"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
	</mx:TabNavigator>
</les:ModuleTitleWindow>